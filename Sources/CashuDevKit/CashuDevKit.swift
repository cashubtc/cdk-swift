// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(CashuDevKitFFI)
import CashuDevKitFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_cdk_ffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_cdk_ffi_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureCdkFfiInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.
// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




/**
 * FFI-compatible ActiveSubscription
 */
public protocol ActiveSubscriptionProtocol: AnyObject, Sendable {
    
    /**
     * Get the subscription ID
     */
    func id()  -> String
    
    /**
     * Receive the next notification
     */
    func recv() async throws  -> NotificationPayload
    
    /**
     * Try to receive a notification without blocking
     */
    func tryRecv() async throws  -> NotificationPayload?
    
}
/**
 * FFI-compatible ActiveSubscription
 */
open class ActiveSubscription: ActiveSubscriptionProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cdk_ffi_fn_clone_activesubscription(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cdk_ffi_fn_free_activesubscription(pointer, $0) }
    }

    

    
    /**
     * Get the subscription ID
     */
open func id() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_activesubscription_id(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Receive the next notification
     */
open func recv()async throws  -> NotificationPayload  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_activesubscription_recv(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeNotificationPayload_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Try to receive a notification without blocking
     */
open func tryRecv()async throws  -> NotificationPayload?  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_activesubscription_try_recv(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionTypeNotificationPayload.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeActiveSubscription: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ActiveSubscription

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ActiveSubscription {
        return ActiveSubscription(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ActiveSubscription) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ActiveSubscription {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ActiveSubscription, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeActiveSubscription_lift(_ pointer: UnsafeMutableRawPointer) throws -> ActiveSubscription {
    return try FfiConverterTypeActiveSubscription.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeActiveSubscription_lower(_ value: ActiveSubscription) -> UnsafeMutableRawPointer {
    return FfiConverterTypeActiveSubscription.lower(value)
}






/**
 * FFI-compatible MeltQuoteBolt11Response
 */
public protocol MeltQuoteBolt11ResponseProtocol: AnyObject, Sendable {
    
    /**
     * Get amount
     */
    func amount()  -> Amount
    
    /**
     * Get expiry
     */
    func expiry()  -> UInt64
    
    /**
     * Get fee reserve
     */
    func feeReserve()  -> Amount
    
    /**
     * Get payment preimage
     */
    func paymentPreimage()  -> String?
    
    /**
     * Get quote ID
     */
    func quote()  -> String
    
    /**
     * Get request
     */
    func request()  -> String?
    
    /**
     * Get state
     */
    func state()  -> QuoteState
    
    /**
     * Get unit
     */
    func unit()  -> CurrencyUnit?
    
}
/**
 * FFI-compatible MeltQuoteBolt11Response
 */
open class MeltQuoteBolt11Response: MeltQuoteBolt11ResponseProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cdk_ffi_fn_clone_meltquotebolt11response(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cdk_ffi_fn_free_meltquotebolt11response(pointer, $0) }
    }

    

    
    /**
     * Get amount
     */
open func amount() -> Amount  {
    return try!  FfiConverterTypeAmount_lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_meltquotebolt11response_amount(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get expiry
     */
open func expiry() -> UInt64  {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_meltquotebolt11response_expiry(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get fee reserve
     */
open func feeReserve() -> Amount  {
    return try!  FfiConverterTypeAmount_lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_meltquotebolt11response_fee_reserve(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get payment preimage
     */
open func paymentPreimage() -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_meltquotebolt11response_payment_preimage(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get quote ID
     */
open func quote() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_meltquotebolt11response_quote(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get request
     */
open func request() -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_meltquotebolt11response_request(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get state
     */
open func state() -> QuoteState  {
    return try!  FfiConverterTypeQuoteState_lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_meltquotebolt11response_state(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get unit
     */
open func unit() -> CurrencyUnit?  {
    return try!  FfiConverterOptionTypeCurrencyUnit.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_meltquotebolt11response_unit(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMeltQuoteBolt11Response: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = MeltQuoteBolt11Response

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> MeltQuoteBolt11Response {
        return MeltQuoteBolt11Response(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: MeltQuoteBolt11Response) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MeltQuoteBolt11Response {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: MeltQuoteBolt11Response, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMeltQuoteBolt11Response_lift(_ pointer: UnsafeMutableRawPointer) throws -> MeltQuoteBolt11Response {
    return try FfiConverterTypeMeltQuoteBolt11Response.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMeltQuoteBolt11Response_lower(_ value: MeltQuoteBolt11Response) -> UnsafeMutableRawPointer {
    return FfiConverterTypeMeltQuoteBolt11Response.lower(value)
}






/**
 * FFI-compatible MintQuoteBolt11Response
 */
public protocol MintQuoteBolt11ResponseProtocol: AnyObject, Sendable {
    
    /**
     * Get amount
     */
    func amount()  -> Amount?
    
    /**
     * Get expiry
     */
    func expiry()  -> UInt64?
    
    /**
     * Get pubkey
     */
    func pubkey()  -> String?
    
    /**
     * Get quote ID
     */
    func quote()  -> String
    
    /**
     * Get request string
     */
    func request()  -> String
    
    /**
     * Get state
     */
    func state()  -> QuoteState
    
    /**
     * Get unit
     */
    func unit()  -> CurrencyUnit?
    
}
/**
 * FFI-compatible MintQuoteBolt11Response
 */
open class MintQuoteBolt11Response: MintQuoteBolt11ResponseProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cdk_ffi_fn_clone_mintquotebolt11response(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cdk_ffi_fn_free_mintquotebolt11response(pointer, $0) }
    }

    

    
    /**
     * Get amount
     */
open func amount() -> Amount?  {
    return try!  FfiConverterOptionTypeAmount.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_mintquotebolt11response_amount(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get expiry
     */
open func expiry() -> UInt64?  {
    return try!  FfiConverterOptionUInt64.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_mintquotebolt11response_expiry(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get pubkey
     */
open func pubkey() -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_mintquotebolt11response_pubkey(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get quote ID
     */
open func quote() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_mintquotebolt11response_quote(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get request string
     */
open func request() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_mintquotebolt11response_request(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get state
     */
open func state() -> QuoteState  {
    return try!  FfiConverterTypeQuoteState_lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_mintquotebolt11response_state(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get unit
     */
open func unit() -> CurrencyUnit?  {
    return try!  FfiConverterOptionTypeCurrencyUnit.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_mintquotebolt11response_unit(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMintQuoteBolt11Response: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = MintQuoteBolt11Response

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> MintQuoteBolt11Response {
        return MintQuoteBolt11Response(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: MintQuoteBolt11Response) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MintQuoteBolt11Response {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: MintQuoteBolt11Response, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMintQuoteBolt11Response_lift(_ pointer: UnsafeMutableRawPointer) throws -> MintQuoteBolt11Response {
    return try FfiConverterTypeMintQuoteBolt11Response.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMintQuoteBolt11Response_lower(_ value: MintQuoteBolt11Response) -> UnsafeMutableRawPointer {
    return FfiConverterTypeMintQuoteBolt11Response.lower(value)
}






/**
 * FFI-compatible MultiMintWallet
 */
public protocol MultiMintWalletProtocol: AnyObject, Sendable {
    
    /**
     * Add a mint to this MultiMintWallet
     */
    func addMint(mintUrl: MintUrl, targetProofCount: UInt32?) async throws 
    
    /**
     * Check all mint quotes and mint if paid
     */
    func checkAllMintQuotes(mintUrl: MintUrl?) async throws  -> Amount
    
    /**
     * Consolidate proofs across all mints
     */
    func consolidate() async throws  -> Amount
    
    /**
     * Get wallet balances for all mints
     */
    func getBalances() async throws  -> [String: Amount]
    
    /**
     * Get list of mint URLs
     */
    func getMintUrls() async  -> [String]
    
    /**
     * Check if mint is in wallet
     */
    func hasMint(mintUrl: MintUrl) async  -> Bool
    
    /**
     * List proofs for all mints
     */
    func listProofs() async throws  -> [String: [Proof]]
    
    /**
     * List transactions from all mints
     */
    func listTransactions(direction: TransactionDirection?) async throws  -> [Transaction]
    
    /**
     * Melt tokens (pay a bolt11 invoice)
     */
    func melt(bolt11: String, options: MeltOptions?, maxFee: Amount?) async throws  -> Melted
    
    /**
     * Get a melt quote from a specific mint
     */
    func meltQuote(mintUrl: MintUrl, request: String, options: MeltOptions?) async throws  -> MeltQuote
    
    /**
     * Mint tokens at a specific mint
     */
    func mint(mintUrl: MintUrl, quoteId: String, spendingConditions: SpendingConditions?) async throws  -> [Proof]
    
    /**
     * Get a mint quote from a specific mint
     */
    func mintQuote(mintUrl: MintUrl, amount: Amount, description: String?) async throws  -> MintQuote
    
    /**
     * Prepare a send operation from a specific mint
     */
    func prepareSend(mintUrl: MintUrl, amount: Amount, options: MultiMintSendOptions) async throws  -> PreparedSend
    
    /**
     * Receive token
     */
    func receive(token: Token, options: MultiMintReceiveOptions) async throws  -> Amount
    
    /**
     * Remove mint from MultiMintWallet
     */
    func removeMint(mintUrl: MintUrl) async 
    
    /**
     * Restore wallets for a specific mint
     */
    func restore(mintUrl: MintUrl) async throws  -> Amount
    
    /**
     * Swap proofs with automatic wallet selection
     */
    func swap(amount: Amount?, spendingConditions: SpendingConditions?) async throws  -> [Proof]?
    
    /**
     * Get total balance across all mints
     */
    func totalBalance() async throws  -> Amount
    
    /**
     * Transfer funds between mints
     */
    func transfer(sourceMint: MintUrl, targetMint: MintUrl, transferMode: TransferMode) async throws  -> TransferResult
    
    /**
     * Get the currency unit for this wallet
     */
    func unit()  -> CurrencyUnit
    
    /**
     * Verify token DLEQ proofs
     */
    func verifyTokenDleq(token: Token) async throws 
    
}
/**
 * FFI-compatible MultiMintWallet
 */
open class MultiMintWallet: MultiMintWalletProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cdk_ffi_fn_clone_multimintwallet(self.pointer, $0) }
    }
    /**
     * Create a new MultiMintWallet from mnemonic using WalletDatabase trait
     */
public convenience init(unit: CurrencyUnit, mnemonic: String, db: WalletDatabase)throws  {
    let pointer =
        try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_constructor_multimintwallet_new(
        FfiConverterTypeCurrencyUnit_lower(unit),
        FfiConverterString.lower(mnemonic),
        FfiConverterTypeWalletDatabase_lower(db),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cdk_ffi_fn_free_multimintwallet(pointer, $0) }
    }

    
    /**
     * Create a new MultiMintWallet with proxy configuration
     */
public static func newWithProxy(unit: CurrencyUnit, mnemonic: String, db: WalletDatabase, proxyUrl: String)throws  -> MultiMintWallet  {
    return try  FfiConverterTypeMultiMintWallet_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_constructor_multimintwallet_new_with_proxy(
        FfiConverterTypeCurrencyUnit_lower(unit),
        FfiConverterString.lower(mnemonic),
        FfiConverterTypeWalletDatabase_lower(db),
        FfiConverterString.lower(proxyUrl),$0
    )
})
}
    

    
    /**
     * Add a mint to this MultiMintWallet
     */
open func addMint(mintUrl: MintUrl, targetProofCount: UInt32?)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_add_mint(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(mintUrl),FfiConverterOptionUInt32.lower(targetProofCount)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Check all mint quotes and mint if paid
     */
open func checkAllMintQuotes(mintUrl: MintUrl?)async throws  -> Amount  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_check_all_mint_quotes(
                    self.uniffiClonePointer(),
                    FfiConverterOptionTypeMintUrl.lower(mintUrl)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeAmount_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Consolidate proofs across all mints
     */
open func consolidate()async throws  -> Amount  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_consolidate(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeAmount_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get wallet balances for all mints
     */
open func getBalances()async throws  -> [String: Amount]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_get_balances(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterDictionaryStringTypeAmount.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get list of mint URLs
     */
open func getMintUrls()async  -> [String]  {
    return
        try!  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_get_mint_urls(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceString.lift,
            errorHandler: nil
            
        )
}
    
    /**
     * Check if mint is in wallet
     */
open func hasMint(mintUrl: MintUrl)async  -> Bool  {
    return
        try!  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_has_mint(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(mintUrl)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_i8,
            completeFunc: ffi_cdk_ffi_rust_future_complete_i8,
            freeFunc: ffi_cdk_ffi_rust_future_free_i8,
            liftFunc: FfiConverterBool.lift,
            errorHandler: nil
            
        )
}
    
    /**
     * List proofs for all mints
     */
open func listProofs()async throws  -> [String: [Proof]]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_list_proofs(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterDictionaryStringSequenceTypeProof.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * List transactions from all mints
     */
open func listTransactions(direction: TransactionDirection?)async throws  -> [Transaction]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_list_transactions(
                    self.uniffiClonePointer(),
                    FfiConverterOptionTypeTransactionDirection.lower(direction)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeTransaction.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Melt tokens (pay a bolt11 invoice)
     */
open func melt(bolt11: String, options: MeltOptions?, maxFee: Amount?)async throws  -> Melted  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_melt(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(bolt11),FfiConverterOptionTypeMeltOptions.lower(options),FfiConverterOptionTypeAmount.lower(maxFee)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeMelted_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get a melt quote from a specific mint
     */
open func meltQuote(mintUrl: MintUrl, request: String, options: MeltOptions?)async throws  -> MeltQuote  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_melt_quote(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(mintUrl),FfiConverterString.lower(request),FfiConverterOptionTypeMeltOptions.lower(options)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeMeltQuote_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Mint tokens at a specific mint
     */
open func mint(mintUrl: MintUrl, quoteId: String, spendingConditions: SpendingConditions?)async throws  -> [Proof]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_mint(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(mintUrl),FfiConverterString.lower(quoteId),FfiConverterOptionTypeSpendingConditions.lower(spendingConditions)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeProof.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get a mint quote from a specific mint
     */
open func mintQuote(mintUrl: MintUrl, amount: Amount, description: String?)async throws  -> MintQuote  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_mint_quote(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(mintUrl),FfiConverterTypeAmount_lower(amount),FfiConverterOptionString.lower(description)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeMintQuote_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Prepare a send operation from a specific mint
     */
open func prepareSend(mintUrl: MintUrl, amount: Amount, options: MultiMintSendOptions)async throws  -> PreparedSend  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_prepare_send(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(mintUrl),FfiConverterTypeAmount_lower(amount),FfiConverterTypeMultiMintSendOptions_lower(options)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_pointer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_pointer,
            freeFunc: ffi_cdk_ffi_rust_future_free_pointer,
            liftFunc: FfiConverterTypePreparedSend_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Receive token
     */
open func receive(token: Token, options: MultiMintReceiveOptions)async throws  -> Amount  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_receive(
                    self.uniffiClonePointer(),
                    FfiConverterTypeToken_lower(token),FfiConverterTypeMultiMintReceiveOptions_lower(options)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeAmount_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Remove mint from MultiMintWallet
     */
open func removeMint(mintUrl: MintUrl)async   {
    return
        try!  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_remove_mint(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(mintUrl)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: nil
            
        )
}
    
    /**
     * Restore wallets for a specific mint
     */
open func restore(mintUrl: MintUrl)async throws  -> Amount  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_restore(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(mintUrl)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeAmount_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Swap proofs with automatic wallet selection
     */
open func swap(amount: Amount?, spendingConditions: SpendingConditions?)async throws  -> [Proof]?  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_swap(
                    self.uniffiClonePointer(),
                    FfiConverterOptionTypeAmount.lower(amount),FfiConverterOptionTypeSpendingConditions.lower(spendingConditions)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionSequenceTypeProof.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get total balance across all mints
     */
open func totalBalance()async throws  -> Amount  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_total_balance(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeAmount_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Transfer funds between mints
     */
open func transfer(sourceMint: MintUrl, targetMint: MintUrl, transferMode: TransferMode)async throws  -> TransferResult  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_transfer(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(sourceMint),FfiConverterTypeMintUrl_lower(targetMint),FfiConverterTypeTransferMode_lower(transferMode)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeTransferResult_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get the currency unit for this wallet
     */
open func unit() -> CurrencyUnit  {
    return try!  FfiConverterTypeCurrencyUnit_lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_multimintwallet_unit(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Verify token DLEQ proofs
     */
open func verifyTokenDleq(token: Token)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_multimintwallet_verify_token_dleq(
                    self.uniffiClonePointer(),
                    FfiConverterTypeToken_lower(token)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMultiMintWallet: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = MultiMintWallet

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> MultiMintWallet {
        return MultiMintWallet(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: MultiMintWallet) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MultiMintWallet {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: MultiMintWallet, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMultiMintWallet_lift(_ pointer: UnsafeMutableRawPointer) throws -> MultiMintWallet {
    return try FfiConverterTypeMultiMintWallet.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMultiMintWallet_lower(_ value: MultiMintWallet) -> UnsafeMutableRawPointer {
    return FfiConverterTypeMultiMintWallet.lower(value)
}






/**
 * FFI-compatible PreparedSend
 */
public protocol PreparedSendProtocol: AnyObject, Sendable {
    
    /**
     * Get the amount to send
     */
    func amount()  -> Amount
    
    /**
     * Cancel the prepared send operation
     */
    func cancel() async throws 
    
    /**
     * Confirm the prepared send and create a token
     */
    func confirm(memo: String?) async throws  -> Token
    
    /**
     * Get the total fee for this send operation
     */
    func fee()  -> Amount
    
    /**
     * Get the prepared send ID
     */
    func id()  -> String
    
    /**
     * Get the proofs that will be used
     */
    func proofs()  -> [Proof]
    
}
/**
 * FFI-compatible PreparedSend
 */
open class PreparedSend: PreparedSendProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cdk_ffi_fn_clone_preparedsend(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cdk_ffi_fn_free_preparedsend(pointer, $0) }
    }

    

    
    /**
     * Get the amount to send
     */
open func amount() -> Amount  {
    return try!  FfiConverterTypeAmount_lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_preparedsend_amount(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Cancel the prepared send operation
     */
open func cancel()async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_preparedsend_cancel(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Confirm the prepared send and create a token
     */
open func confirm(memo: String?)async throws  -> Token  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_preparedsend_confirm(
                    self.uniffiClonePointer(),
                    FfiConverterOptionString.lower(memo)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_pointer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_pointer,
            freeFunc: ffi_cdk_ffi_rust_future_free_pointer,
            liftFunc: FfiConverterTypeToken_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get the total fee for this send operation
     */
open func fee() -> Amount  {
    return try!  FfiConverterTypeAmount_lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_preparedsend_fee(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the prepared send ID
     */
open func id() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_preparedsend_id(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the proofs that will be used
     */
open func proofs() -> [Proof]  {
    return try!  FfiConverterSequenceTypeProof.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_preparedsend_proofs(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePreparedSend: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PreparedSend

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PreparedSend {
        return PreparedSend(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PreparedSend) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PreparedSend {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PreparedSend, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePreparedSend_lift(_ pointer: UnsafeMutableRawPointer) throws -> PreparedSend {
    return try FfiConverterTypePreparedSend.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePreparedSend_lower(_ value: PreparedSend) -> UnsafeMutableRawPointer {
    return FfiConverterTypePreparedSend.lower(value)
}






/**
 * FFI-compatible Proof
 */
public protocol ProofProtocol: AnyObject, Sendable {
    
    /**
     * Get the amount
     */
    func amount()  -> Amount
    
    /**
     * Get the unblinded signature (C) as string
     */
    func c()  -> String
    
    /**
     * Get the DLEQ proof if present
     */
    func dleq()  -> ProofDleq?
    
    /**
     * Check if proof has DLEQ proof
     */
    func hasDleq()  -> Bool
    
    /**
     * Check if proof is active with given keyset IDs
     */
    func isActive(activeKeysetIds: [String])  -> Bool
    
    /**
     * Get the keyset ID as string
     */
    func keysetId()  -> String
    
    /**
     * Get the secret as string
     */
    func secret()  -> String
    
    /**
     * Get the witness
     */
    func witness()  -> Witness?
    
    /**
     * Get the Y value (hash_to_curve of secret)
     */
    func y() throws  -> String
    
}
/**
 * FFI-compatible Proof
 */
open class Proof: ProofProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cdk_ffi_fn_clone_proof(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cdk_ffi_fn_free_proof(pointer, $0) }
    }

    

    
    /**
     * Get the amount
     */
open func amount() -> Amount  {
    return try!  FfiConverterTypeAmount_lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_proof_amount(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the unblinded signature (C) as string
     */
open func c() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_proof_c(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the DLEQ proof if present
     */
open func dleq() -> ProofDleq?  {
    return try!  FfiConverterOptionTypeProofDleq.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_proof_dleq(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Check if proof has DLEQ proof
     */
open func hasDleq() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_proof_has_dleq(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Check if proof is active with given keyset IDs
     */
open func isActive(activeKeysetIds: [String]) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_proof_is_active(self.uniffiClonePointer(),
        FfiConverterSequenceString.lower(activeKeysetIds),$0
    )
})
}
    
    /**
     * Get the keyset ID as string
     */
open func keysetId() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_proof_keyset_id(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the secret as string
     */
open func secret() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_proof_secret(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the witness
     */
open func witness() -> Witness?  {
    return try!  FfiConverterOptionTypeWitness.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_proof_witness(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the Y value (hash_to_curve of secret)
     */
open func y()throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_method_proof_y(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProof: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Proof

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Proof {
        return Proof(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Proof) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Proof {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Proof, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProof_lift(_ pointer: UnsafeMutableRawPointer) throws -> Proof {
    return try FfiConverterTypeProof.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProof_lower(_ value: Proof) -> UnsafeMutableRawPointer {
    return FfiConverterTypeProof.lower(value)
}






/**
 * FFI-compatible Token
 */
public protocol TokenProtocol: AnyObject, Sendable {
    
    /**
     * Encode token to string representation
     */
    func encode()  -> String
    
    /**
     * Get the memo from the token
     */
    func memo()  -> String?
    
    /**
     * Get the mint URL
     */
    func mintUrl() throws  -> MintUrl
    
    /**
     * Get proofs from the token (simplified - no keyset filtering for now)
     */
    func proofsSimple() throws  -> [Proof]
    
    /**
     * Convert token to raw bytes
     */
    func toRawBytes() throws  -> Data
    
    /**
     * Get the currency unit
     */
    func unit()  -> CurrencyUnit?
    
    /**
     * Get the total value of the token
     */
    func value() throws  -> Amount
    
}
/**
 * FFI-compatible Token
 */
open class Token: TokenProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cdk_ffi_fn_clone_token(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cdk_ffi_fn_free_token(pointer, $0) }
    }

    
    /**
     * Decode token from string representation
     */
public static func decode(encodedToken: String)throws  -> Token  {
    return try  FfiConverterTypeToken_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_constructor_token_decode(
        FfiConverterString.lower(encodedToken),$0
    )
})
}
    
    /**
     * Create a new Token from string
     */
public static func fromString(encodedToken: String)throws  -> Token  {
    return try  FfiConverterTypeToken_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_constructor_token_from_string(
        FfiConverterString.lower(encodedToken),$0
    )
})
}
    

    
    /**
     * Encode token to string representation
     */
open func encode() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_token_encode(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the memo from the token
     */
open func memo() -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_token_memo(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the mint URL
     */
open func mintUrl()throws  -> MintUrl  {
    return try  FfiConverterTypeMintUrl_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_method_token_mint_url(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get proofs from the token (simplified - no keyset filtering for now)
     */
open func proofsSimple()throws  -> [Proof]  {
    return try  FfiConverterSequenceTypeProof.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_method_token_proofs_simple(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Convert token to raw bytes
     */
open func toRawBytes()throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_method_token_to_raw_bytes(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the currency unit
     */
open func unit() -> CurrencyUnit?  {
    return try!  FfiConverterOptionTypeCurrencyUnit.lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_token_unit(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the total value of the token
     */
open func value()throws  -> Amount  {
    return try  FfiConverterTypeAmount_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_method_token_value(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeToken: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Token

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Token {
        return Token(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Token) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Token {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Token, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeToken_lift(_ pointer: UnsafeMutableRawPointer) throws -> Token {
    return try FfiConverterTypeToken.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeToken_lower(_ value: Token) -> UnsafeMutableRawPointer {
    return FfiConverterTypeToken.lower(value)
}






/**
 * FFI-compatible Wallet
 */
public protocol WalletProtocol: AnyObject, Sendable {
    
    /**
     * Calculate fee for a given number of proofs with the specified keyset
     */
    func calculateFee(proofCount: UInt32, keysetId: String) async throws  -> Amount
    
    /**
     * Check all pending proofs and return the total amount reclaimed
     */
    func checkAllPendingProofs() async throws  -> Amount
    
    /**
     * Check if proofs are spent
     */
    func checkProofsSpent(proofs: [Proof]) async throws  -> [Bool]
    
    /**
     * Get the active keyset for the wallet's unit
     */
    func getActiveKeyset() async throws  -> KeySetInfo
    
    /**
     * Get fees for a specific keyset ID
     */
    func getKeysetFeesById(keysetId: String) async throws  -> UInt64
    
    /**
     * Get mint info
     */
    func getMintInfo() async throws  -> MintInfo?
    
    /**
     * Get proofs by states
     */
    func getProofsByStates(states: [ProofState]) async throws  -> [Proof]
    
    /**
     * Get transaction by ID
     */
    func getTransaction(id: TransactionId) async throws  -> Transaction?
    
    /**
     * Get unspent auth proofs
     */
    func getUnspentAuthProofs() async throws  -> [AuthProof]
    
    /**
     * List transactions
     */
    func listTransactions(direction: TransactionDirection?) async throws  -> [Transaction]
    
    /**
     * Melt tokens
     */
    func melt(quoteId: String) async throws  -> Melted
    
    /**
     * Get a quote for a BIP353 melt
     *
     * This method resolves a BIP353 address (e.g., "alice@example.com") to a Lightning offer
     * and then creates a melt quote for that offer.
     */
    func meltBip353Quote(bip353Address: String, amountMsat: Amount) async throws  -> MeltQuote
    
    /**
     * Get a quote for a bolt12 melt
     */
    func meltBolt12Quote(request: String, options: MeltOptions?) async throws  -> MeltQuote
    
    /**
     * Get a melt quote
     */
    func meltQuote(request: String, options: MeltOptions?) async throws  -> MeltQuote
    
    /**
     * Mint tokens
     */
    func mint(quoteId: String, amountSplitTarget: SplitTarget, spendingConditions: SpendingConditions?) async throws  -> [Proof]
    
    /**
     * Mint blind auth tokens
     */
    func mintBlindAuth(amount: Amount) async throws  -> [Proof]
    
    /**
     * Mint tokens using bolt12
     */
    func mintBolt12(quoteId: String, amount: Amount?, amountSplitTarget: SplitTarget, spendingConditions: SpendingConditions?) async throws  -> [Proof]
    
    /**
     * Get a quote for a bolt12 mint
     */
    func mintBolt12Quote(amount: Amount?, description: String?) async throws  -> MintQuote
    
    /**
     * Get a mint quote
     */
    func mintQuote(amount: Amount, description: String?) async throws  -> MintQuote
    
    /**
     * Get the mint URL
     */
    func mintUrl()  -> MintUrl
    
    /**
     * Prepare a send operation
     */
    func prepareSend(amount: Amount, options: SendOptions) async throws  -> PreparedSend
    
    /**
     * Receive tokens
     */
    func receive(token: Token, options: ReceiveOptions) async throws  -> Amount
    
    /**
     * Receive proofs directly
     */
    func receiveProofs(proofs: [Proof], options: ReceiveOptions, memo: String?) async throws  -> Amount
    
    /**
     * Reclaim unspent proofs (mark them as unspent in the database)
     */
    func reclaimUnspent(proofs: [Proof]) async throws 
    
    /**
     * Refresh access token using the stored refresh token
     */
    func refreshAccessToken() async throws 
    
    /**
     * Refresh keysets from the mint
     */
    func refreshKeysets() async throws  -> [KeySetInfo]
    
    /**
     * Restore wallet from seed
     */
    func restore() async throws  -> Amount
    
    /**
     * Revert a transaction
     */
    func revertTransaction(id: TransactionId) async throws 
    
    /**
     * Set Clear Auth Token (CAT) for authentication
     */
    func setCat(cat: String) async throws 
    
    /**
     * Set refresh token for authentication
     */
    func setRefreshToken(refreshToken: String) async throws 
    
    /**
     * Subscribe to wallet events
     */
    func subscribe(params: SubscribeParams) async throws  -> ActiveSubscription
    
    /**
     * Swap proofs
     */
    func swap(amount: Amount?, amountSplitTarget: SplitTarget, inputProofs: [Proof], spendingConditions: SpendingConditions?, includeFees: Bool) async throws  -> [Proof]?
    
    /**
     * Get total balance
     */
    func totalBalance() async throws  -> Amount
    
    /**
     * Get total pending balance
     */
    func totalPendingBalance() async throws  -> Amount
    
    /**
     * Get total reserved balance
     */
    func totalReservedBalance() async throws  -> Amount
    
    /**
     * Get the currency unit
     */
    func unit()  -> CurrencyUnit
    
    /**
     * Verify token DLEQ proofs
     */
    func verifyTokenDleq(token: Token) async throws 
    
}
/**
 * FFI-compatible Wallet
 */
open class Wallet: WalletProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cdk_ffi_fn_clone_wallet(self.pointer, $0) }
    }
    /**
     * Create a new Wallet from mnemonic using WalletDatabase trait
     */
public convenience init(mintUrl: String, unit: CurrencyUnit, mnemonic: String, db: WalletDatabase, config: WalletConfig)throws  {
    let pointer =
        try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_constructor_wallet_new(
        FfiConverterString.lower(mintUrl),
        FfiConverterTypeCurrencyUnit_lower(unit),
        FfiConverterString.lower(mnemonic),
        FfiConverterTypeWalletDatabase_lower(db),
        FfiConverterTypeWalletConfig_lower(config),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cdk_ffi_fn_free_wallet(pointer, $0) }
    }

    

    
    /**
     * Calculate fee for a given number of proofs with the specified keyset
     */
open func calculateFee(proofCount: UInt32, keysetId: String)async throws  -> Amount  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_calculate_fee(
                    self.uniffiClonePointer(),
                    FfiConverterUInt32.lower(proofCount),FfiConverterString.lower(keysetId)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeAmount_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Check all pending proofs and return the total amount reclaimed
     */
open func checkAllPendingProofs()async throws  -> Amount  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_check_all_pending_proofs(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeAmount_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Check if proofs are spent
     */
open func checkProofsSpent(proofs: [Proof])async throws  -> [Bool]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_check_proofs_spent(
                    self.uniffiClonePointer(),
                    FfiConverterSequenceTypeProof.lower(proofs)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceBool.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get the active keyset for the wallet's unit
     */
open func getActiveKeyset()async throws  -> KeySetInfo  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_get_active_keyset(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeKeySetInfo_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get fees for a specific keyset ID
     */
open func getKeysetFeesById(keysetId: String)async throws  -> UInt64  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_get_keyset_fees_by_id(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(keysetId)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_u64,
            completeFunc: ffi_cdk_ffi_rust_future_complete_u64,
            freeFunc: ffi_cdk_ffi_rust_future_free_u64,
            liftFunc: FfiConverterUInt64.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get mint info
     */
open func getMintInfo()async throws  -> MintInfo?  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_get_mint_info(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionTypeMintInfo.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get proofs by states
     */
open func getProofsByStates(states: [ProofState])async throws  -> [Proof]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_get_proofs_by_states(
                    self.uniffiClonePointer(),
                    FfiConverterSequenceTypeProofState.lower(states)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeProof.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get transaction by ID
     */
open func getTransaction(id: TransactionId)async throws  -> Transaction?  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_get_transaction(
                    self.uniffiClonePointer(),
                    FfiConverterTypeTransactionId_lower(id)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionTypeTransaction.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get unspent auth proofs
     */
open func getUnspentAuthProofs()async throws  -> [AuthProof]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_get_unspent_auth_proofs(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeAuthProof.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * List transactions
     */
open func listTransactions(direction: TransactionDirection?)async throws  -> [Transaction]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_list_transactions(
                    self.uniffiClonePointer(),
                    FfiConverterOptionTypeTransactionDirection.lower(direction)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeTransaction.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Melt tokens
     */
open func melt(quoteId: String)async throws  -> Melted  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_melt(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(quoteId)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeMelted_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get a quote for a BIP353 melt
     *
     * This method resolves a BIP353 address (e.g., "alice@example.com") to a Lightning offer
     * and then creates a melt quote for that offer.
     */
open func meltBip353Quote(bip353Address: String, amountMsat: Amount)async throws  -> MeltQuote  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_melt_bip353_quote(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(bip353Address),FfiConverterTypeAmount_lower(amountMsat)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeMeltQuote_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get a quote for a bolt12 melt
     */
open func meltBolt12Quote(request: String, options: MeltOptions?)async throws  -> MeltQuote  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_melt_bolt12_quote(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(request),FfiConverterOptionTypeMeltOptions.lower(options)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeMeltQuote_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get a melt quote
     */
open func meltQuote(request: String, options: MeltOptions?)async throws  -> MeltQuote  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_melt_quote(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(request),FfiConverterOptionTypeMeltOptions.lower(options)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeMeltQuote_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Mint tokens
     */
open func mint(quoteId: String, amountSplitTarget: SplitTarget, spendingConditions: SpendingConditions?)async throws  -> [Proof]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_mint(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(quoteId),FfiConverterTypeSplitTarget_lower(amountSplitTarget),FfiConverterOptionTypeSpendingConditions.lower(spendingConditions)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeProof.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Mint blind auth tokens
     */
open func mintBlindAuth(amount: Amount)async throws  -> [Proof]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_mint_blind_auth(
                    self.uniffiClonePointer(),
                    FfiConverterTypeAmount_lower(amount)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeProof.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Mint tokens using bolt12
     */
open func mintBolt12(quoteId: String, amount: Amount?, amountSplitTarget: SplitTarget, spendingConditions: SpendingConditions?)async throws  -> [Proof]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_mint_bolt12(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(quoteId),FfiConverterOptionTypeAmount.lower(amount),FfiConverterTypeSplitTarget_lower(amountSplitTarget),FfiConverterOptionTypeSpendingConditions.lower(spendingConditions)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeProof.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get a quote for a bolt12 mint
     */
open func mintBolt12Quote(amount: Amount?, description: String?)async throws  -> MintQuote  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_mint_bolt12_quote(
                    self.uniffiClonePointer(),
                    FfiConverterOptionTypeAmount.lower(amount),FfiConverterOptionString.lower(description)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeMintQuote_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get a mint quote
     */
open func mintQuote(amount: Amount, description: String?)async throws  -> MintQuote  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_mint_quote(
                    self.uniffiClonePointer(),
                    FfiConverterTypeAmount_lower(amount),FfiConverterOptionString.lower(description)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeMintQuote_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get the mint URL
     */
open func mintUrl() -> MintUrl  {
    return try!  FfiConverterTypeMintUrl_lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_wallet_mint_url(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Prepare a send operation
     */
open func prepareSend(amount: Amount, options: SendOptions)async throws  -> PreparedSend  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_prepare_send(
                    self.uniffiClonePointer(),
                    FfiConverterTypeAmount_lower(amount),FfiConverterTypeSendOptions_lower(options)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_pointer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_pointer,
            freeFunc: ffi_cdk_ffi_rust_future_free_pointer,
            liftFunc: FfiConverterTypePreparedSend_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Receive tokens
     */
open func receive(token: Token, options: ReceiveOptions)async throws  -> Amount  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_receive(
                    self.uniffiClonePointer(),
                    FfiConverterTypeToken_lower(token),FfiConverterTypeReceiveOptions_lower(options)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeAmount_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Receive proofs directly
     */
open func receiveProofs(proofs: [Proof], options: ReceiveOptions, memo: String?)async throws  -> Amount  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_receive_proofs(
                    self.uniffiClonePointer(),
                    FfiConverterSequenceTypeProof.lower(proofs),FfiConverterTypeReceiveOptions_lower(options),FfiConverterOptionString.lower(memo)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeAmount_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Reclaim unspent proofs (mark them as unspent in the database)
     */
open func reclaimUnspent(proofs: [Proof])async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_reclaim_unspent(
                    self.uniffiClonePointer(),
                    FfiConverterSequenceTypeProof.lower(proofs)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Refresh access token using the stored refresh token
     */
open func refreshAccessToken()async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_refresh_access_token(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Refresh keysets from the mint
     */
open func refreshKeysets()async throws  -> [KeySetInfo]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_refresh_keysets(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeKeySetInfo.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Restore wallet from seed
     */
open func restore()async throws  -> Amount  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_restore(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeAmount_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Revert a transaction
     */
open func revertTransaction(id: TransactionId)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_revert_transaction(
                    self.uniffiClonePointer(),
                    FfiConverterTypeTransactionId_lower(id)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Set Clear Auth Token (CAT) for authentication
     */
open func setCat(cat: String)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_set_cat(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(cat)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Set refresh token for authentication
     */
open func setRefreshToken(refreshToken: String)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_set_refresh_token(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(refreshToken)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Subscribe to wallet events
     */
open func subscribe(params: SubscribeParams)async throws  -> ActiveSubscription  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_subscribe(
                    self.uniffiClonePointer(),
                    FfiConverterTypeSubscribeParams_lower(params)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_pointer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_pointer,
            freeFunc: ffi_cdk_ffi_rust_future_free_pointer,
            liftFunc: FfiConverterTypeActiveSubscription_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Swap proofs
     */
open func swap(amount: Amount?, amountSplitTarget: SplitTarget, inputProofs: [Proof], spendingConditions: SpendingConditions?, includeFees: Bool)async throws  -> [Proof]?  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_swap(
                    self.uniffiClonePointer(),
                    FfiConverterOptionTypeAmount.lower(amount),FfiConverterTypeSplitTarget_lower(amountSplitTarget),FfiConverterSequenceTypeProof.lower(inputProofs),FfiConverterOptionTypeSpendingConditions.lower(spendingConditions),FfiConverterBool.lower(includeFees)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionSequenceTypeProof.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get total balance
     */
open func totalBalance()async throws  -> Amount  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_total_balance(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeAmount_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get total pending balance
     */
open func totalPendingBalance()async throws  -> Amount  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_total_pending_balance(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeAmount_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get total reserved balance
     */
open func totalReservedBalance()async throws  -> Amount  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_total_reserved_balance(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeAmount_lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get the currency unit
     */
open func unit() -> CurrencyUnit  {
    return try!  FfiConverterTypeCurrencyUnit_lift(try! rustCall() {
    uniffi_cdk_ffi_fn_method_wallet_unit(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Verify token DLEQ proofs
     */
open func verifyTokenDleq(token: Token)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_wallet_verify_token_dleq(
                    self.uniffiClonePointer(),
                    FfiConverterTypeToken_lower(token)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWallet: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Wallet

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Wallet {
        return Wallet(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Wallet) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Wallet {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Wallet, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWallet_lift(_ pointer: UnsafeMutableRawPointer) throws -> Wallet {
    return try FfiConverterTypeWallet.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWallet_lower(_ value: Wallet) -> UnsafeMutableRawPointer {
    return FfiConverterTypeWallet.lower(value)
}






/**
 * FFI-compatible trait for wallet database operations
 * This trait mirrors the CDK WalletDatabase trait but uses FFI-compatible types
 */
public protocol WalletDatabase: AnyObject, Sendable {
    
    /**
     * Add Mint to storage
     */
    func addMint(mintUrl: MintUrl, mintInfo: MintInfo?) async throws 
    
    /**
     * Remove Mint from storage
     */
    func removeMint(mintUrl: MintUrl) async throws 
    
    /**
     * Get mint from storage
     */
    func getMint(mintUrl: MintUrl) async throws  -> MintInfo?
    
    /**
     * Get all mints from storage
     */
    func getMints() async throws  -> [MintUrl: MintInfo?]
    
    /**
     * Update mint url
     */
    func updateMintUrl(oldMintUrl: MintUrl, newMintUrl: MintUrl) async throws 
    
    /**
     * Add mint keyset to storage
     */
    func addMintKeysets(mintUrl: MintUrl, keysets: [KeySetInfo]) async throws 
    
    /**
     * Get mint keysets for mint url
     */
    func getMintKeysets(mintUrl: MintUrl) async throws  -> [KeySetInfo]?
    
    /**
     * Get mint keyset by id
     */
    func getKeysetById(keysetId: Id) async throws  -> KeySetInfo?
    
    /**
     * Add mint quote to storage
     */
    func addMintQuote(quote: MintQuote) async throws 
    
    /**
     * Get mint quote from storage
     */
    func getMintQuote(quoteId: String) async throws  -> MintQuote?
    
    /**
     * Get mint quotes from storage
     */
    func getMintQuotes() async throws  -> [MintQuote]
    
    /**
     * Remove mint quote from storage
     */
    func removeMintQuote(quoteId: String) async throws 
    
    /**
     * Add melt quote to storage
     */
    func addMeltQuote(quote: MeltQuote) async throws 
    
    /**
     * Get melt quote from storage
     */
    func getMeltQuote(quoteId: String) async throws  -> MeltQuote?
    
    /**
     * Get melt quotes from storage
     */
    func getMeltQuotes() async throws  -> [MeltQuote]
    
    /**
     * Remove melt quote from storage
     */
    func removeMeltQuote(quoteId: String) async throws 
    
    /**
     * Add Keys to storage
     */
    func addKeys(keyset: KeySet) async throws 
    
    /**
     * Get Keys from storage
     */
    func getKeys(id: Id) async throws  -> Keys?
    
    /**
     * Remove Keys from storage
     */
    func removeKeys(id: Id) async throws 
    
    /**
     * Update the proofs in storage by adding new proofs or removing proofs by their Y value
     */
    func updateProofs(added: [ProofInfo], removedYs: [PublicKey]) async throws 
    
    /**
     * Get proofs from storage
     */
    func getProofs(mintUrl: MintUrl?, unit: CurrencyUnit?, state: [ProofState]?, spendingConditions: [SpendingConditions]?) async throws  -> [ProofInfo]
    
    /**
     * Update proofs state in storage
     */
    func updateProofsState(ys: [PublicKey], state: ProofState) async throws 
    
    /**
     * Increment Keyset counter
     */
    func incrementKeysetCounter(keysetId: Id, count: UInt32) async throws  -> UInt32
    
    /**
     * Add transaction to storage
     */
    func addTransaction(transaction: Transaction) async throws 
    
    /**
     * Get transaction from storage
     */
    func getTransaction(transactionId: TransactionId) async throws  -> Transaction?
    
    /**
     * List transactions from storage
     */
    func listTransactions(mintUrl: MintUrl?, direction: TransactionDirection?, unit: CurrencyUnit?) async throws  -> [Transaction]
    
    /**
     * Remove transaction from storage
     */
    func removeTransaction(transactionId: TransactionId) async throws 
    
}
/**
 * FFI-compatible trait for wallet database operations
 * This trait mirrors the CDK WalletDatabase trait but uses FFI-compatible types
 */
open class WalletDatabaseImpl: WalletDatabase, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cdk_ffi_fn_clone_walletdatabase(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cdk_ffi_fn_free_walletdatabase(pointer, $0) }
    }

    

    
    /**
     * Add Mint to storage
     */
open func addMint(mintUrl: MintUrl, mintInfo: MintInfo?)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_add_mint(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(mintUrl),FfiConverterOptionTypeMintInfo.lower(mintInfo)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Remove Mint from storage
     */
open func removeMint(mintUrl: MintUrl)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_remove_mint(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(mintUrl)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get mint from storage
     */
open func getMint(mintUrl: MintUrl)async throws  -> MintInfo?  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_get_mint(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(mintUrl)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionTypeMintInfo.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get all mints from storage
     */
open func getMints()async throws  -> [MintUrl: MintInfo?]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_get_mints(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterDictionaryTypeMintUrlOptionTypeMintInfo.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Update mint url
     */
open func updateMintUrl(oldMintUrl: MintUrl, newMintUrl: MintUrl)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_update_mint_url(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(oldMintUrl),FfiConverterTypeMintUrl_lower(newMintUrl)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Add mint keyset to storage
     */
open func addMintKeysets(mintUrl: MintUrl, keysets: [KeySetInfo])async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_add_mint_keysets(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(mintUrl),FfiConverterSequenceTypeKeySetInfo.lower(keysets)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get mint keysets for mint url
     */
open func getMintKeysets(mintUrl: MintUrl)async throws  -> [KeySetInfo]?  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_get_mint_keysets(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(mintUrl)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionSequenceTypeKeySetInfo.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get mint keyset by id
     */
open func getKeysetById(keysetId: Id)async throws  -> KeySetInfo?  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_get_keyset_by_id(
                    self.uniffiClonePointer(),
                    FfiConverterTypeId_lower(keysetId)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionTypeKeySetInfo.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Add mint quote to storage
     */
open func addMintQuote(quote: MintQuote)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_add_mint_quote(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintQuote_lower(quote)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get mint quote from storage
     */
open func getMintQuote(quoteId: String)async throws  -> MintQuote?  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_get_mint_quote(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(quoteId)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionTypeMintQuote.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get mint quotes from storage
     */
open func getMintQuotes()async throws  -> [MintQuote]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_get_mint_quotes(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeMintQuote.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Remove mint quote from storage
     */
open func removeMintQuote(quoteId: String)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_remove_mint_quote(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(quoteId)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Add melt quote to storage
     */
open func addMeltQuote(quote: MeltQuote)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_add_melt_quote(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMeltQuote_lower(quote)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get melt quote from storage
     */
open func getMeltQuote(quoteId: String)async throws  -> MeltQuote?  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_get_melt_quote(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(quoteId)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionTypeMeltQuote.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get melt quotes from storage
     */
open func getMeltQuotes()async throws  -> [MeltQuote]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_get_melt_quotes(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeMeltQuote.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Remove melt quote from storage
     */
open func removeMeltQuote(quoteId: String)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_remove_melt_quote(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(quoteId)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Add Keys to storage
     */
open func addKeys(keyset: KeySet)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_add_keys(
                    self.uniffiClonePointer(),
                    FfiConverterTypeKeySet_lower(keyset)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get Keys from storage
     */
open func getKeys(id: Id)async throws  -> Keys?  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_get_keys(
                    self.uniffiClonePointer(),
                    FfiConverterTypeId_lower(id)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionTypeKeys.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Remove Keys from storage
     */
open func removeKeys(id: Id)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_remove_keys(
                    self.uniffiClonePointer(),
                    FfiConverterTypeId_lower(id)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Update the proofs in storage by adding new proofs or removing proofs by their Y value
     */
open func updateProofs(added: [ProofInfo], removedYs: [PublicKey])async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_update_proofs(
                    self.uniffiClonePointer(),
                    FfiConverterSequenceTypeProofInfo.lower(added),FfiConverterSequenceTypePublicKey.lower(removedYs)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get proofs from storage
     */
open func getProofs(mintUrl: MintUrl?, unit: CurrencyUnit?, state: [ProofState]?, spendingConditions: [SpendingConditions]?)async throws  -> [ProofInfo]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_get_proofs(
                    self.uniffiClonePointer(),
                    FfiConverterOptionTypeMintUrl.lower(mintUrl),FfiConverterOptionTypeCurrencyUnit.lower(unit),FfiConverterOptionSequenceTypeProofState.lower(state),FfiConverterOptionSequenceTypeSpendingConditions.lower(spendingConditions)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeProofInfo.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Update proofs state in storage
     */
open func updateProofsState(ys: [PublicKey], state: ProofState)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_update_proofs_state(
                    self.uniffiClonePointer(),
                    FfiConverterSequenceTypePublicKey.lower(ys),FfiConverterTypeProofState_lower(state)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Increment Keyset counter
     */
open func incrementKeysetCounter(keysetId: Id, count: UInt32)async throws  -> UInt32  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_increment_keyset_counter(
                    self.uniffiClonePointer(),
                    FfiConverterTypeId_lower(keysetId),FfiConverterUInt32.lower(count)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_u32,
            completeFunc: ffi_cdk_ffi_rust_future_complete_u32,
            freeFunc: ffi_cdk_ffi_rust_future_free_u32,
            liftFunc: FfiConverterUInt32.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Add transaction to storage
     */
open func addTransaction(transaction: Transaction)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_add_transaction(
                    self.uniffiClonePointer(),
                    FfiConverterTypeTransaction_lower(transaction)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Get transaction from storage
     */
open func getTransaction(transactionId: TransactionId)async throws  -> Transaction?  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_get_transaction(
                    self.uniffiClonePointer(),
                    FfiConverterTypeTransactionId_lower(transactionId)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionTypeTransaction.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * List transactions from storage
     */
open func listTransactions(mintUrl: MintUrl?, direction: TransactionDirection?, unit: CurrencyUnit?)async throws  -> [Transaction]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_list_transactions(
                    self.uniffiClonePointer(),
                    FfiConverterOptionTypeMintUrl.lower(mintUrl),FfiConverterOptionTypeTransactionDirection.lower(direction),FfiConverterOptionTypeCurrencyUnit.lower(unit)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeTransaction.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
    /**
     * Remove transaction from storage
     */
open func removeTransaction(transactionId: TransactionId)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletdatabase_remove_transaction(
                    self.uniffiClonePointer(),
                    FfiConverterTypeTransactionId_lower(transactionId)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceWalletDatabase {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    //
    // This creates 1-element array, since this seems to be the only way to construct a const
    // pointer that we can pass to the Rust code.
    static let vtable: [UniffiVTableCallbackInterfaceWalletDatabase] = [UniffiVTableCallbackInterfaceWalletDatabase(
        addMint: { (
            uniffiHandle: UInt64,
            mintUrl: RustBuffer,
            mintInfo: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteVoid,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> () in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.addMint(
                     mintUrl: try FfiConverterTypeMintUrl_lift(mintUrl),
                     mintInfo: try FfiConverterOptionTypeMintInfo.lift(mintInfo)
                )
            }

            let uniffiHandleSuccess = { (returnValue: ()) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        removeMint: { (
            uniffiHandle: UInt64,
            mintUrl: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteVoid,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> () in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.removeMint(
                     mintUrl: try FfiConverterTypeMintUrl_lift(mintUrl)
                )
            }

            let uniffiHandleSuccess = { (returnValue: ()) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        getMint: { (
            uniffiHandle: UInt64,
            mintUrl: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteRustBuffer,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> MintInfo? in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.getMint(
                     mintUrl: try FfiConverterTypeMintUrl_lift(mintUrl)
                )
            }

            let uniffiHandleSuccess = { (returnValue: MintInfo?) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: FfiConverterOptionTypeMintInfo.lower(returnValue),
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: RustBuffer.empty(),
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        getMints: { (
            uniffiHandle: UInt64,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteRustBuffer,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> [MintUrl: MintInfo?] in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.getMints(
                )
            }

            let uniffiHandleSuccess = { (returnValue: [MintUrl: MintInfo?]) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: FfiConverterDictionaryTypeMintUrlOptionTypeMintInfo.lower(returnValue),
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: RustBuffer.empty(),
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        updateMintUrl: { (
            uniffiHandle: UInt64,
            oldMintUrl: RustBuffer,
            newMintUrl: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteVoid,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> () in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.updateMintUrl(
                     oldMintUrl: try FfiConverterTypeMintUrl_lift(oldMintUrl),
                     newMintUrl: try FfiConverterTypeMintUrl_lift(newMintUrl)
                )
            }

            let uniffiHandleSuccess = { (returnValue: ()) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        addMintKeysets: { (
            uniffiHandle: UInt64,
            mintUrl: RustBuffer,
            keysets: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteVoid,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> () in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.addMintKeysets(
                     mintUrl: try FfiConverterTypeMintUrl_lift(mintUrl),
                     keysets: try FfiConverterSequenceTypeKeySetInfo.lift(keysets)
                )
            }

            let uniffiHandleSuccess = { (returnValue: ()) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        getMintKeysets: { (
            uniffiHandle: UInt64,
            mintUrl: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteRustBuffer,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> [KeySetInfo]? in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.getMintKeysets(
                     mintUrl: try FfiConverterTypeMintUrl_lift(mintUrl)
                )
            }

            let uniffiHandleSuccess = { (returnValue: [KeySetInfo]?) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: FfiConverterOptionSequenceTypeKeySetInfo.lower(returnValue),
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: RustBuffer.empty(),
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        getKeysetById: { (
            uniffiHandle: UInt64,
            keysetId: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteRustBuffer,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> KeySetInfo? in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.getKeysetById(
                     keysetId: try FfiConverterTypeId_lift(keysetId)
                )
            }

            let uniffiHandleSuccess = { (returnValue: KeySetInfo?) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: FfiConverterOptionTypeKeySetInfo.lower(returnValue),
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: RustBuffer.empty(),
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        addMintQuote: { (
            uniffiHandle: UInt64,
            quote: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteVoid,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> () in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.addMintQuote(
                     quote: try FfiConverterTypeMintQuote_lift(quote)
                )
            }

            let uniffiHandleSuccess = { (returnValue: ()) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        getMintQuote: { (
            uniffiHandle: UInt64,
            quoteId: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteRustBuffer,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> MintQuote? in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.getMintQuote(
                     quoteId: try FfiConverterString.lift(quoteId)
                )
            }

            let uniffiHandleSuccess = { (returnValue: MintQuote?) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: FfiConverterOptionTypeMintQuote.lower(returnValue),
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: RustBuffer.empty(),
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        getMintQuotes: { (
            uniffiHandle: UInt64,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteRustBuffer,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> [MintQuote] in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.getMintQuotes(
                )
            }

            let uniffiHandleSuccess = { (returnValue: [MintQuote]) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: FfiConverterSequenceTypeMintQuote.lower(returnValue),
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: RustBuffer.empty(),
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        removeMintQuote: { (
            uniffiHandle: UInt64,
            quoteId: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteVoid,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> () in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.removeMintQuote(
                     quoteId: try FfiConverterString.lift(quoteId)
                )
            }

            let uniffiHandleSuccess = { (returnValue: ()) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        addMeltQuote: { (
            uniffiHandle: UInt64,
            quote: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteVoid,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> () in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.addMeltQuote(
                     quote: try FfiConverterTypeMeltQuote_lift(quote)
                )
            }

            let uniffiHandleSuccess = { (returnValue: ()) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        getMeltQuote: { (
            uniffiHandle: UInt64,
            quoteId: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteRustBuffer,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> MeltQuote? in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.getMeltQuote(
                     quoteId: try FfiConverterString.lift(quoteId)
                )
            }

            let uniffiHandleSuccess = { (returnValue: MeltQuote?) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: FfiConverterOptionTypeMeltQuote.lower(returnValue),
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: RustBuffer.empty(),
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        getMeltQuotes: { (
            uniffiHandle: UInt64,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteRustBuffer,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> [MeltQuote] in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.getMeltQuotes(
                )
            }

            let uniffiHandleSuccess = { (returnValue: [MeltQuote]) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: FfiConverterSequenceTypeMeltQuote.lower(returnValue),
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: RustBuffer.empty(),
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        removeMeltQuote: { (
            uniffiHandle: UInt64,
            quoteId: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteVoid,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> () in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.removeMeltQuote(
                     quoteId: try FfiConverterString.lift(quoteId)
                )
            }

            let uniffiHandleSuccess = { (returnValue: ()) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        addKeys: { (
            uniffiHandle: UInt64,
            keyset: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteVoid,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> () in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.addKeys(
                     keyset: try FfiConverterTypeKeySet_lift(keyset)
                )
            }

            let uniffiHandleSuccess = { (returnValue: ()) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        getKeys: { (
            uniffiHandle: UInt64,
            id: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteRustBuffer,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> Keys? in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.getKeys(
                     id: try FfiConverterTypeId_lift(id)
                )
            }

            let uniffiHandleSuccess = { (returnValue: Keys?) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: FfiConverterOptionTypeKeys.lower(returnValue),
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: RustBuffer.empty(),
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        removeKeys: { (
            uniffiHandle: UInt64,
            id: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteVoid,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> () in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.removeKeys(
                     id: try FfiConverterTypeId_lift(id)
                )
            }

            let uniffiHandleSuccess = { (returnValue: ()) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        updateProofs: { (
            uniffiHandle: UInt64,
            added: RustBuffer,
            removedYs: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteVoid,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> () in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.updateProofs(
                     added: try FfiConverterSequenceTypeProofInfo.lift(added),
                     removedYs: try FfiConverterSequenceTypePublicKey.lift(removedYs)
                )
            }

            let uniffiHandleSuccess = { (returnValue: ()) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        getProofs: { (
            uniffiHandle: UInt64,
            mintUrl: RustBuffer,
            unit: RustBuffer,
            state: RustBuffer,
            spendingConditions: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteRustBuffer,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> [ProofInfo] in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.getProofs(
                     mintUrl: try FfiConverterOptionTypeMintUrl.lift(mintUrl),
                     unit: try FfiConverterOptionTypeCurrencyUnit.lift(unit),
                     state: try FfiConverterOptionSequenceTypeProofState.lift(state),
                     spendingConditions: try FfiConverterOptionSequenceTypeSpendingConditions.lift(spendingConditions)
                )
            }

            let uniffiHandleSuccess = { (returnValue: [ProofInfo]) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: FfiConverterSequenceTypeProofInfo.lower(returnValue),
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: RustBuffer.empty(),
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        updateProofsState: { (
            uniffiHandle: UInt64,
            ys: RustBuffer,
            state: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteVoid,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> () in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.updateProofsState(
                     ys: try FfiConverterSequenceTypePublicKey.lift(ys),
                     state: try FfiConverterTypeProofState_lift(state)
                )
            }

            let uniffiHandleSuccess = { (returnValue: ()) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        incrementKeysetCounter: { (
            uniffiHandle: UInt64,
            keysetId: RustBuffer,
            count: UInt32,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteU32,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> UInt32 in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.incrementKeysetCounter(
                     keysetId: try FfiConverterTypeId_lift(keysetId),
                     count: try FfiConverterUInt32.lift(count)
                )
            }

            let uniffiHandleSuccess = { (returnValue: UInt32) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructU32(
                        returnValue: FfiConverterUInt32.lower(returnValue),
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructU32(
                        returnValue: 0,
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        addTransaction: { (
            uniffiHandle: UInt64,
            transaction: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteVoid,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> () in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.addTransaction(
                     transaction: try FfiConverterTypeTransaction_lift(transaction)
                )
            }

            let uniffiHandleSuccess = { (returnValue: ()) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        getTransaction: { (
            uniffiHandle: UInt64,
            transactionId: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteRustBuffer,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> Transaction? in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.getTransaction(
                     transactionId: try FfiConverterTypeTransactionId_lift(transactionId)
                )
            }

            let uniffiHandleSuccess = { (returnValue: Transaction?) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: FfiConverterOptionTypeTransaction.lower(returnValue),
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: RustBuffer.empty(),
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        listTransactions: { (
            uniffiHandle: UInt64,
            mintUrl: RustBuffer,
            direction: RustBuffer,
            unit: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteRustBuffer,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> [Transaction] in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.listTransactions(
                     mintUrl: try FfiConverterOptionTypeMintUrl.lift(mintUrl),
                     direction: try FfiConverterOptionTypeTransactionDirection.lift(direction),
                     unit: try FfiConverterOptionTypeCurrencyUnit.lift(unit)
                )
            }

            let uniffiHandleSuccess = { (returnValue: [Transaction]) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: FfiConverterSequenceTypeTransaction.lower(returnValue),
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: RustBuffer.empty(),
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        removeTransaction: { (
            uniffiHandle: UInt64,
            transactionId: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteVoid,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> () in
                guard let uniffiObj = try? FfiConverterTypeWalletDatabase.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.removeTransaction(
                     transactionId: try FfiConverterTypeTransactionId_lift(transactionId)
                )
            }

            let uniffiHandleSuccess = { (returnValue: ()) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructVoid(
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeFfiError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeWalletDatabase.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface WalletDatabase: handle missing in uniffiFree")
            }
        }
    )]
}

private func uniffiCallbackInitWalletDatabase() {
    uniffi_cdk_ffi_fn_init_callback_vtable_walletdatabase(UniffiCallbackInterfaceWalletDatabase.vtable)
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletDatabase: FfiConverter {
    fileprivate static let handleMap = UniffiHandleMap<WalletDatabase>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = WalletDatabase

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> WalletDatabase {
        return WalletDatabaseImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: WalletDatabase) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletDatabase {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: WalletDatabase, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletDatabase_lift(_ pointer: UnsafeMutableRawPointer) throws -> WalletDatabase {
    return try FfiConverterTypeWalletDatabase.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletDatabase_lower(_ value: WalletDatabase) -> UnsafeMutableRawPointer {
    return FfiConverterTypeWalletDatabase.lower(value)
}






/**
 * FFI-compatible WalletSqliteDatabase implementation that implements the WalletDatabase trait
 */
public protocol WalletSqliteDatabaseProtocol: AnyObject, Sendable {
    
    func addKeys(keyset: KeySet) async throws 
    
    func addMeltQuote(quote: MeltQuote) async throws 
    
    func addMint(mintUrl: MintUrl, mintInfo: MintInfo?) async throws 
    
    func addMintKeysets(mintUrl: MintUrl, keysets: [KeySetInfo]) async throws 
    
    func addMintQuote(quote: MintQuote) async throws 
    
    func addTransaction(transaction: Transaction) async throws 
    
    func getKeys(id: Id) async throws  -> Keys?
    
    func getKeysetById(keysetId: Id) async throws  -> KeySetInfo?
    
    func getMeltQuote(quoteId: String) async throws  -> MeltQuote?
    
    func getMeltQuotes() async throws  -> [MeltQuote]
    
    func getMint(mintUrl: MintUrl) async throws  -> MintInfo?
    
    func getMintKeysets(mintUrl: MintUrl) async throws  -> [KeySetInfo]?
    
    func getMintQuote(quoteId: String) async throws  -> MintQuote?
    
    func getMintQuotes() async throws  -> [MintQuote]
    
    func getMints() async throws  -> [MintUrl: MintInfo?]
    
    func getProofs(mintUrl: MintUrl?, unit: CurrencyUnit?, state: [ProofState]?, spendingConditions: [SpendingConditions]?) async throws  -> [ProofInfo]
    
    func getTransaction(transactionId: TransactionId) async throws  -> Transaction?
    
    func incrementKeysetCounter(keysetId: Id, count: UInt32) async throws  -> UInt32
    
    func listTransactions(mintUrl: MintUrl?, direction: TransactionDirection?, unit: CurrencyUnit?) async throws  -> [Transaction]
    
    func removeKeys(id: Id) async throws 
    
    func removeMeltQuote(quoteId: String) async throws 
    
    func removeMint(mintUrl: MintUrl) async throws 
    
    func removeMintQuote(quoteId: String) async throws 
    
    func removeTransaction(transactionId: TransactionId) async throws 
    
    func updateMintUrl(oldMintUrl: MintUrl, newMintUrl: MintUrl) async throws 
    
    func updateProofs(added: [ProofInfo], removedYs: [PublicKey]) async throws 
    
    func updateProofsState(ys: [PublicKey], state: ProofState) async throws 
    
}
/**
 * FFI-compatible WalletSqliteDatabase implementation that implements the WalletDatabase trait
 */
open class WalletSqliteDatabase: WalletSqliteDatabaseProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cdk_ffi_fn_clone_walletsqlitedatabase(self.pointer, $0) }
    }
    /**
     * Create a new WalletSqliteDatabase with the given work directory
     */
public convenience init(filePath: String)throws  {
    let pointer =
        try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_constructor_walletsqlitedatabase_new(
        FfiConverterString.lower(filePath),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cdk_ffi_fn_free_walletsqlitedatabase(pointer, $0) }
    }

    
    /**
     * Create an in-memory database
     */
public static func newInMemory()throws  -> WalletSqliteDatabase  {
    return try  FfiConverterTypeWalletSqliteDatabase_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_constructor_walletsqlitedatabase_new_in_memory($0
    )
})
}
    

    
open func addKeys(keyset: KeySet)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_add_keys(
                    self.uniffiClonePointer(),
                    FfiConverterTypeKeySet_lower(keyset)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func addMeltQuote(quote: MeltQuote)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_add_melt_quote(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMeltQuote_lower(quote)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func addMint(mintUrl: MintUrl, mintInfo: MintInfo?)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_add_mint(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(mintUrl),FfiConverterOptionTypeMintInfo.lower(mintInfo)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func addMintKeysets(mintUrl: MintUrl, keysets: [KeySetInfo])async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_add_mint_keysets(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(mintUrl),FfiConverterSequenceTypeKeySetInfo.lower(keysets)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func addMintQuote(quote: MintQuote)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_add_mint_quote(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintQuote_lower(quote)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func addTransaction(transaction: Transaction)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_add_transaction(
                    self.uniffiClonePointer(),
                    FfiConverterTypeTransaction_lower(transaction)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func getKeys(id: Id)async throws  -> Keys?  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_get_keys(
                    self.uniffiClonePointer(),
                    FfiConverterTypeId_lower(id)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionTypeKeys.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func getKeysetById(keysetId: Id)async throws  -> KeySetInfo?  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_get_keyset_by_id(
                    self.uniffiClonePointer(),
                    FfiConverterTypeId_lower(keysetId)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionTypeKeySetInfo.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func getMeltQuote(quoteId: String)async throws  -> MeltQuote?  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_get_melt_quote(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(quoteId)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionTypeMeltQuote.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func getMeltQuotes()async throws  -> [MeltQuote]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_get_melt_quotes(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeMeltQuote.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func getMint(mintUrl: MintUrl)async throws  -> MintInfo?  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_get_mint(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(mintUrl)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionTypeMintInfo.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func getMintKeysets(mintUrl: MintUrl)async throws  -> [KeySetInfo]?  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_get_mint_keysets(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(mintUrl)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionSequenceTypeKeySetInfo.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func getMintQuote(quoteId: String)async throws  -> MintQuote?  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_get_mint_quote(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(quoteId)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionTypeMintQuote.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func getMintQuotes()async throws  -> [MintQuote]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_get_mint_quotes(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeMintQuote.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func getMints()async throws  -> [MintUrl: MintInfo?]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_get_mints(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterDictionaryTypeMintUrlOptionTypeMintInfo.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func getProofs(mintUrl: MintUrl?, unit: CurrencyUnit?, state: [ProofState]?, spendingConditions: [SpendingConditions]?)async throws  -> [ProofInfo]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_get_proofs(
                    self.uniffiClonePointer(),
                    FfiConverterOptionTypeMintUrl.lower(mintUrl),FfiConverterOptionTypeCurrencyUnit.lower(unit),FfiConverterOptionSequenceTypeProofState.lower(state),FfiConverterOptionSequenceTypeSpendingConditions.lower(spendingConditions)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeProofInfo.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func getTransaction(transactionId: TransactionId)async throws  -> Transaction?  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_get_transaction(
                    self.uniffiClonePointer(),
                    FfiConverterTypeTransactionId_lower(transactionId)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionTypeTransaction.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func incrementKeysetCounter(keysetId: Id, count: UInt32)async throws  -> UInt32  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_increment_keyset_counter(
                    self.uniffiClonePointer(),
                    FfiConverterTypeId_lower(keysetId),FfiConverterUInt32.lower(count)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_u32,
            completeFunc: ffi_cdk_ffi_rust_future_complete_u32,
            freeFunc: ffi_cdk_ffi_rust_future_free_u32,
            liftFunc: FfiConverterUInt32.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func listTransactions(mintUrl: MintUrl?, direction: TransactionDirection?, unit: CurrencyUnit?)async throws  -> [Transaction]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_list_transactions(
                    self.uniffiClonePointer(),
                    FfiConverterOptionTypeMintUrl.lower(mintUrl),FfiConverterOptionTypeTransactionDirection.lower(direction),FfiConverterOptionTypeCurrencyUnit.lower(unit)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_cdk_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_cdk_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeTransaction.lift,
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func removeKeys(id: Id)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_remove_keys(
                    self.uniffiClonePointer(),
                    FfiConverterTypeId_lower(id)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func removeMeltQuote(quoteId: String)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_remove_melt_quote(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(quoteId)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func removeMint(mintUrl: MintUrl)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_remove_mint(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(mintUrl)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func removeMintQuote(quoteId: String)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_remove_mint_quote(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(quoteId)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func removeTransaction(transactionId: TransactionId)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_remove_transaction(
                    self.uniffiClonePointer(),
                    FfiConverterTypeTransactionId_lower(transactionId)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func updateMintUrl(oldMintUrl: MintUrl, newMintUrl: MintUrl)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_update_mint_url(
                    self.uniffiClonePointer(),
                    FfiConverterTypeMintUrl_lower(oldMintUrl),FfiConverterTypeMintUrl_lower(newMintUrl)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func updateProofs(added: [ProofInfo], removedYs: [PublicKey])async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_update_proofs(
                    self.uniffiClonePointer(),
                    FfiConverterSequenceTypeProofInfo.lower(added),FfiConverterSequenceTypePublicKey.lower(removedYs)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    
open func updateProofsState(ys: [PublicKey], state: ProofState)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cdk_ffi_fn_method_walletsqlitedatabase_update_proofs_state(
                    self.uniffiClonePointer(),
                    FfiConverterSequenceTypePublicKey.lower(ys),FfiConverterTypeProofState_lower(state)
                )
            },
            pollFunc: ffi_cdk_ffi_rust_future_poll_void,
            completeFunc: ffi_cdk_ffi_rust_future_complete_void,
            freeFunc: ffi_cdk_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFfiError_lift
        )
}
    

}
extension WalletSqliteDatabase: WalletDatabase {}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletSqliteDatabase: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = WalletSqliteDatabase

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> WalletSqliteDatabase {
        return WalletSqliteDatabase(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: WalletSqliteDatabase) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletSqliteDatabase {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: WalletSqliteDatabase, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletSqliteDatabase_lift(_ pointer: UnsafeMutableRawPointer) throws -> WalletSqliteDatabase {
    return try FfiConverterTypeWalletSqliteDatabase.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletSqliteDatabase_lower(_ value: WalletSqliteDatabase) -> UnsafeMutableRawPointer {
    return FfiConverterTypeWalletSqliteDatabase.lower(value)
}




/**
 * FFI-compatible Amount type
 */
public struct Amount {
    public var value: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(value: UInt64) {
        self.value = value
    }
}

#if compiler(>=6)
extension Amount: Sendable {}
#endif


extension Amount: Equatable, Hashable {
    public static func ==(lhs: Amount, rhs: Amount) -> Bool {
        if lhs.value != rhs.value {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(value)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAmount: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Amount {
        return
            try Amount(
                value: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: Amount, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.value, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAmount_lift(_ buf: RustBuffer) throws -> Amount {
    return try FfiConverterTypeAmount.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAmount_lower(_ value: Amount) -> RustBuffer {
    return FfiConverterTypeAmount.lower(value)
}


/**
 * FFI-compatible AuthProof
 */
public struct AuthProof {
    /**
     * Keyset ID
     */
    public var keysetId: String
    /**
     * Secret message
     */
    public var secret: String
    /**
     * Unblinded signature (C)
     */
    public var c: String
    /**
     * Y value (hash_to_curve of secret)
     */
    public var y: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Keyset ID
         */keysetId: String, 
        /**
         * Secret message
         */secret: String, 
        /**
         * Unblinded signature (C)
         */c: String, 
        /**
         * Y value (hash_to_curve of secret)
         */y: String) {
        self.keysetId = keysetId
        self.secret = secret
        self.c = c
        self.y = y
    }
}

#if compiler(>=6)
extension AuthProof: Sendable {}
#endif


extension AuthProof: Equatable, Hashable {
    public static func ==(lhs: AuthProof, rhs: AuthProof) -> Bool {
        if lhs.keysetId != rhs.keysetId {
            return false
        }
        if lhs.secret != rhs.secret {
            return false
        }
        if lhs.c != rhs.c {
            return false
        }
        if lhs.y != rhs.y {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(keysetId)
        hasher.combine(secret)
        hasher.combine(c)
        hasher.combine(y)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthProof: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthProof {
        return
            try AuthProof(
                keysetId: FfiConverterString.read(from: &buf), 
                secret: FfiConverterString.read(from: &buf), 
                c: FfiConverterString.read(from: &buf), 
                y: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: AuthProof, into buf: inout [UInt8]) {
        FfiConverterString.write(value.keysetId, into: &buf)
        FfiConverterString.write(value.secret, into: &buf)
        FfiConverterString.write(value.c, into: &buf)
        FfiConverterString.write(value.y, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthProof_lift(_ buf: RustBuffer) throws -> AuthProof {
    return try FfiConverterTypeAuthProof.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthProof_lower(_ value: AuthProof) -> RustBuffer {
    return FfiConverterTypeAuthProof.lower(value)
}


/**
 * FFI-compatible BlindAuthSettings (NUT-22)
 */
public struct BlindAuthSettings {
    /**
     * Maximum number of blind auth tokens that can be minted per request
     */
    public var batMaxMint: UInt64
    /**
     * Protected endpoints requiring blind authentication
     */
    public var protectedEndpoints: [ProtectedEndpoint]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Maximum number of blind auth tokens that can be minted per request
         */batMaxMint: UInt64, 
        /**
         * Protected endpoints requiring blind authentication
         */protectedEndpoints: [ProtectedEndpoint]) {
        self.batMaxMint = batMaxMint
        self.protectedEndpoints = protectedEndpoints
    }
}

#if compiler(>=6)
extension BlindAuthSettings: Sendable {}
#endif


extension BlindAuthSettings: Equatable, Hashable {
    public static func ==(lhs: BlindAuthSettings, rhs: BlindAuthSettings) -> Bool {
        if lhs.batMaxMint != rhs.batMaxMint {
            return false
        }
        if lhs.protectedEndpoints != rhs.protectedEndpoints {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(batMaxMint)
        hasher.combine(protectedEndpoints)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBlindAuthSettings: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlindAuthSettings {
        return
            try BlindAuthSettings(
                batMaxMint: FfiConverterUInt64.read(from: &buf), 
                protectedEndpoints: FfiConverterSequenceTypeProtectedEndpoint.read(from: &buf)
        )
    }

    public static func write(_ value: BlindAuthSettings, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.batMaxMint, into: &buf)
        FfiConverterSequenceTypeProtectedEndpoint.write(value.protectedEndpoints, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBlindAuthSettings_lift(_ buf: RustBuffer) throws -> BlindAuthSettings {
    return try FfiConverterTypeBlindAuthSettings.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBlindAuthSettings_lower(_ value: BlindAuthSettings) -> RustBuffer {
    return FfiConverterTypeBlindAuthSettings.lower(value)
}


/**
 * FFI-compatible DLEQ proof for blind signatures
 */
public struct BlindSignatureDleq {
    /**
     * e value (hex-encoded SecretKey)
     */
    public var e: String
    /**
     * s value (hex-encoded SecretKey)
     */
    public var s: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * e value (hex-encoded SecretKey)
         */e: String, 
        /**
         * s value (hex-encoded SecretKey)
         */s: String) {
        self.e = e
        self.s = s
    }
}

#if compiler(>=6)
extension BlindSignatureDleq: Sendable {}
#endif


extension BlindSignatureDleq: Equatable, Hashable {
    public static func ==(lhs: BlindSignatureDleq, rhs: BlindSignatureDleq) -> Bool {
        if lhs.e != rhs.e {
            return false
        }
        if lhs.s != rhs.s {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(e)
        hasher.combine(s)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBlindSignatureDleq: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlindSignatureDleq {
        return
            try BlindSignatureDleq(
                e: FfiConverterString.read(from: &buf), 
                s: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: BlindSignatureDleq, into buf: inout [UInt8]) {
        FfiConverterString.write(value.e, into: &buf)
        FfiConverterString.write(value.s, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBlindSignatureDleq_lift(_ buf: RustBuffer) throws -> BlindSignatureDleq {
    return try FfiConverterTypeBlindSignatureDleq.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBlindSignatureDleq_lower(_ value: BlindSignatureDleq) -> RustBuffer {
    return FfiConverterTypeBlindSignatureDleq.lower(value)
}


/**
 * FFI-compatible ClearAuthSettings (NUT-21)
 */
public struct ClearAuthSettings {
    /**
     * OpenID Connect discovery URL
     */
    public var openidDiscovery: String
    /**
     * OAuth 2.0 client ID
     */
    public var clientId: String
    /**
     * Protected endpoints requiring clear authentication
     */
    public var protectedEndpoints: [ProtectedEndpoint]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * OpenID Connect discovery URL
         */openidDiscovery: String, 
        /**
         * OAuth 2.0 client ID
         */clientId: String, 
        /**
         * Protected endpoints requiring clear authentication
         */protectedEndpoints: [ProtectedEndpoint]) {
        self.openidDiscovery = openidDiscovery
        self.clientId = clientId
        self.protectedEndpoints = protectedEndpoints
    }
}

#if compiler(>=6)
extension ClearAuthSettings: Sendable {}
#endif


extension ClearAuthSettings: Equatable, Hashable {
    public static func ==(lhs: ClearAuthSettings, rhs: ClearAuthSettings) -> Bool {
        if lhs.openidDiscovery != rhs.openidDiscovery {
            return false
        }
        if lhs.clientId != rhs.clientId {
            return false
        }
        if lhs.protectedEndpoints != rhs.protectedEndpoints {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(openidDiscovery)
        hasher.combine(clientId)
        hasher.combine(protectedEndpoints)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeClearAuthSettings: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ClearAuthSettings {
        return
            try ClearAuthSettings(
                openidDiscovery: FfiConverterString.read(from: &buf), 
                clientId: FfiConverterString.read(from: &buf), 
                protectedEndpoints: FfiConverterSequenceTypeProtectedEndpoint.read(from: &buf)
        )
    }

    public static func write(_ value: ClearAuthSettings, into buf: inout [UInt8]) {
        FfiConverterString.write(value.openidDiscovery, into: &buf)
        FfiConverterString.write(value.clientId, into: &buf)
        FfiConverterSequenceTypeProtectedEndpoint.write(value.protectedEndpoints, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeClearAuthSettings_lift(_ buf: RustBuffer) throws -> ClearAuthSettings {
    return try FfiConverterTypeClearAuthSettings.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeClearAuthSettings_lower(_ value: ClearAuthSettings) -> RustBuffer {
    return FfiConverterTypeClearAuthSettings.lower(value)
}


/**
 * FFI-compatible Conditions (for spending conditions)
 */
public struct Conditions {
    /**
     * Unix locktime after which refund keys can be used
     */
    public var locktime: UInt64?
    /**
     * Additional Public keys (as hex strings)
     */
    public var pubkeys: [String]
    /**
     * Refund keys (as hex strings)
     */
    public var refundKeys: [String]
    /**
     * Number of signatures required (default 1)
     */
    public var numSigs: UInt64?
    /**
     * Signature flag (0 = SigInputs, 1 = SigAll)
     */
    public var sigFlag: UInt8
    /**
     * Number of refund signatures required (default 1)
     */
    public var numSigsRefund: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Unix locktime after which refund keys can be used
         */locktime: UInt64?, 
        /**
         * Additional Public keys (as hex strings)
         */pubkeys: [String], 
        /**
         * Refund keys (as hex strings)
         */refundKeys: [String], 
        /**
         * Number of signatures required (default 1)
         */numSigs: UInt64?, 
        /**
         * Signature flag (0 = SigInputs, 1 = SigAll)
         */sigFlag: UInt8, 
        /**
         * Number of refund signatures required (default 1)
         */numSigsRefund: UInt64?) {
        self.locktime = locktime
        self.pubkeys = pubkeys
        self.refundKeys = refundKeys
        self.numSigs = numSigs
        self.sigFlag = sigFlag
        self.numSigsRefund = numSigsRefund
    }
}

#if compiler(>=6)
extension Conditions: Sendable {}
#endif


extension Conditions: Equatable, Hashable {
    public static func ==(lhs: Conditions, rhs: Conditions) -> Bool {
        if lhs.locktime != rhs.locktime {
            return false
        }
        if lhs.pubkeys != rhs.pubkeys {
            return false
        }
        if lhs.refundKeys != rhs.refundKeys {
            return false
        }
        if lhs.numSigs != rhs.numSigs {
            return false
        }
        if lhs.sigFlag != rhs.sigFlag {
            return false
        }
        if lhs.numSigsRefund != rhs.numSigsRefund {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(locktime)
        hasher.combine(pubkeys)
        hasher.combine(refundKeys)
        hasher.combine(numSigs)
        hasher.combine(sigFlag)
        hasher.combine(numSigsRefund)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConditions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Conditions {
        return
            try Conditions(
                locktime: FfiConverterOptionUInt64.read(from: &buf), 
                pubkeys: FfiConverterSequenceString.read(from: &buf), 
                refundKeys: FfiConverterSequenceString.read(from: &buf), 
                numSigs: FfiConverterOptionUInt64.read(from: &buf), 
                sigFlag: FfiConverterUInt8.read(from: &buf), 
                numSigsRefund: FfiConverterOptionUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: Conditions, into buf: inout [UInt8]) {
        FfiConverterOptionUInt64.write(value.locktime, into: &buf)
        FfiConverterSequenceString.write(value.pubkeys, into: &buf)
        FfiConverterSequenceString.write(value.refundKeys, into: &buf)
        FfiConverterOptionUInt64.write(value.numSigs, into: &buf)
        FfiConverterUInt8.write(value.sigFlag, into: &buf)
        FfiConverterOptionUInt64.write(value.numSigsRefund, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConditions_lift(_ buf: RustBuffer) throws -> Conditions {
    return try FfiConverterTypeConditions.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConditions_lower(_ value: Conditions) -> RustBuffer {
    return FfiConverterTypeConditions.lower(value)
}


/**
 * FFI-compatible ContactInfo
 */
public struct ContactInfo {
    /**
     * Contact Method i.e. nostr
     */
    public var method: String
    /**
     * Contact info i.e. npub...
     */
    public var info: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Contact Method i.e. nostr
         */method: String, 
        /**
         * Contact info i.e. npub...
         */info: String) {
        self.method = method
        self.info = info
    }
}

#if compiler(>=6)
extension ContactInfo: Sendable {}
#endif


extension ContactInfo: Equatable, Hashable {
    public static func ==(lhs: ContactInfo, rhs: ContactInfo) -> Bool {
        if lhs.method != rhs.method {
            return false
        }
        if lhs.info != rhs.info {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(method)
        hasher.combine(info)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeContactInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContactInfo {
        return
            try ContactInfo(
                method: FfiConverterString.read(from: &buf), 
                info: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: ContactInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.method, into: &buf)
        FfiConverterString.write(value.info, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContactInfo_lift(_ buf: RustBuffer) throws -> ContactInfo {
    return try FfiConverterTypeContactInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContactInfo_lower(_ value: ContactInfo) -> RustBuffer {
    return FfiConverterTypeContactInfo.lower(value)
}


/**
 * FFI-compatible Id (for keyset IDs)
 */
public struct Id {
    public var hex: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hex: String) {
        self.hex = hex
    }
}

#if compiler(>=6)
extension Id: Sendable {}
#endif


extension Id: Equatable, Hashable {
    public static func ==(lhs: Id, rhs: Id) -> Bool {
        if lhs.hex != rhs.hex {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hex)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeId: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Id {
        return
            try Id(
                hex: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Id, into buf: inout [UInt8]) {
        FfiConverterString.write(value.hex, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeId_lift(_ buf: RustBuffer) throws -> Id {
    return try FfiConverterTypeId.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeId_lower(_ value: Id) -> RustBuffer {
    return FfiConverterTypeId.lower(value)
}


/**
 * FFI-compatible KeySet
 */
public struct KeySet {
    /**
     * Keyset ID
     */
    public var id: String
    /**
     * Currency unit
     */
    public var unit: CurrencyUnit
    /**
     * The keys (map of amount to public key hex)
     */
    public var keys: [UInt64: String]
    /**
     * Optional expiry timestamp
     */
    public var finalExpiry: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Keyset ID
         */id: String, 
        /**
         * Currency unit
         */unit: CurrencyUnit, 
        /**
         * The keys (map of amount to public key hex)
         */keys: [UInt64: String], 
        /**
         * Optional expiry timestamp
         */finalExpiry: UInt64?) {
        self.id = id
        self.unit = unit
        self.keys = keys
        self.finalExpiry = finalExpiry
    }
}

#if compiler(>=6)
extension KeySet: Sendable {}
#endif


extension KeySet: Equatable, Hashable {
    public static func ==(lhs: KeySet, rhs: KeySet) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.unit != rhs.unit {
            return false
        }
        if lhs.keys != rhs.keys {
            return false
        }
        if lhs.finalExpiry != rhs.finalExpiry {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(unit)
        hasher.combine(keys)
        hasher.combine(finalExpiry)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeKeySet: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeySet {
        return
            try KeySet(
                id: FfiConverterString.read(from: &buf), 
                unit: FfiConverterTypeCurrencyUnit.read(from: &buf), 
                keys: FfiConverterDictionaryUInt64String.read(from: &buf), 
                finalExpiry: FfiConverterOptionUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: KeySet, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterTypeCurrencyUnit.write(value.unit, into: &buf)
        FfiConverterDictionaryUInt64String.write(value.keys, into: &buf)
        FfiConverterOptionUInt64.write(value.finalExpiry, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeKeySet_lift(_ buf: RustBuffer) throws -> KeySet {
    return try FfiConverterTypeKeySet.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeKeySet_lower(_ value: KeySet) -> RustBuffer {
    return FfiConverterTypeKeySet.lower(value)
}


/**
 * FFI-compatible KeySetInfo
 */
public struct KeySetInfo {
    public var id: String
    public var unit: CurrencyUnit
    public var active: Bool
    /**
     * Input fee per thousand (ppk)
     */
    public var inputFeePpk: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, unit: CurrencyUnit, active: Bool, 
        /**
         * Input fee per thousand (ppk)
         */inputFeePpk: UInt64) {
        self.id = id
        self.unit = unit
        self.active = active
        self.inputFeePpk = inputFeePpk
    }
}

#if compiler(>=6)
extension KeySetInfo: Sendable {}
#endif


extension KeySetInfo: Equatable, Hashable {
    public static func ==(lhs: KeySetInfo, rhs: KeySetInfo) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.unit != rhs.unit {
            return false
        }
        if lhs.active != rhs.active {
            return false
        }
        if lhs.inputFeePpk != rhs.inputFeePpk {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(unit)
        hasher.combine(active)
        hasher.combine(inputFeePpk)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeKeySetInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeySetInfo {
        return
            try KeySetInfo(
                id: FfiConverterString.read(from: &buf), 
                unit: FfiConverterTypeCurrencyUnit.read(from: &buf), 
                active: FfiConverterBool.read(from: &buf), 
                inputFeePpk: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: KeySetInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterTypeCurrencyUnit.write(value.unit, into: &buf)
        FfiConverterBool.write(value.active, into: &buf)
        FfiConverterUInt64.write(value.inputFeePpk, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeKeySetInfo_lift(_ buf: RustBuffer) throws -> KeySetInfo {
    return try FfiConverterTypeKeySetInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeKeySetInfo_lower(_ value: KeySetInfo) -> RustBuffer {
    return FfiConverterTypeKeySetInfo.lower(value)
}


/**
 * FFI-compatible Keys (simplified - contains only essential info)
 */
public struct Keys {
    /**
     * Keyset ID
     */
    public var id: String
    /**
     * Currency unit
     */
    public var unit: CurrencyUnit
    /**
     * Map of amount to public key hex (simplified from BTreeMap)
     */
    public var keys: [UInt64: String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Keyset ID
         */id: String, 
        /**
         * Currency unit
         */unit: CurrencyUnit, 
        /**
         * Map of amount to public key hex (simplified from BTreeMap)
         */keys: [UInt64: String]) {
        self.id = id
        self.unit = unit
        self.keys = keys
    }
}

#if compiler(>=6)
extension Keys: Sendable {}
#endif


extension Keys: Equatable, Hashable {
    public static func ==(lhs: Keys, rhs: Keys) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.unit != rhs.unit {
            return false
        }
        if lhs.keys != rhs.keys {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(unit)
        hasher.combine(keys)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeKeys: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Keys {
        return
            try Keys(
                id: FfiConverterString.read(from: &buf), 
                unit: FfiConverterTypeCurrencyUnit.read(from: &buf), 
                keys: FfiConverterDictionaryUInt64String.read(from: &buf)
        )
    }

    public static func write(_ value: Keys, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterTypeCurrencyUnit.write(value.unit, into: &buf)
        FfiConverterDictionaryUInt64String.write(value.keys, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeKeys_lift(_ buf: RustBuffer) throws -> Keys {
    return try FfiConverterTypeKeys.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeKeys_lower(_ value: Keys) -> RustBuffer {
    return FfiConverterTypeKeys.lower(value)
}


/**
 * FFI-compatible MeltMethodSettings (NUT-05)
 */
public struct MeltMethodSettings {
    public var method: PaymentMethod
    public var unit: CurrencyUnit
    public var minAmount: Amount?
    public var maxAmount: Amount?
    /**
     * For bolt11, whether mint supports amountless invoices
     */
    public var amountless: Bool?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(method: PaymentMethod, unit: CurrencyUnit, minAmount: Amount?, maxAmount: Amount?, 
        /**
         * For bolt11, whether mint supports amountless invoices
         */amountless: Bool?) {
        self.method = method
        self.unit = unit
        self.minAmount = minAmount
        self.maxAmount = maxAmount
        self.amountless = amountless
    }
}

#if compiler(>=6)
extension MeltMethodSettings: Sendable {}
#endif


extension MeltMethodSettings: Equatable, Hashable {
    public static func ==(lhs: MeltMethodSettings, rhs: MeltMethodSettings) -> Bool {
        if lhs.method != rhs.method {
            return false
        }
        if lhs.unit != rhs.unit {
            return false
        }
        if lhs.minAmount != rhs.minAmount {
            return false
        }
        if lhs.maxAmount != rhs.maxAmount {
            return false
        }
        if lhs.amountless != rhs.amountless {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(method)
        hasher.combine(unit)
        hasher.combine(minAmount)
        hasher.combine(maxAmount)
        hasher.combine(amountless)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMeltMethodSettings: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MeltMethodSettings {
        return
            try MeltMethodSettings(
                method: FfiConverterTypePaymentMethod.read(from: &buf), 
                unit: FfiConverterTypeCurrencyUnit.read(from: &buf), 
                minAmount: FfiConverterOptionTypeAmount.read(from: &buf), 
                maxAmount: FfiConverterOptionTypeAmount.read(from: &buf), 
                amountless: FfiConverterOptionBool.read(from: &buf)
        )
    }

    public static func write(_ value: MeltMethodSettings, into buf: inout [UInt8]) {
        FfiConverterTypePaymentMethod.write(value.method, into: &buf)
        FfiConverterTypeCurrencyUnit.write(value.unit, into: &buf)
        FfiConverterOptionTypeAmount.write(value.minAmount, into: &buf)
        FfiConverterOptionTypeAmount.write(value.maxAmount, into: &buf)
        FfiConverterOptionBool.write(value.amountless, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMeltMethodSettings_lift(_ buf: RustBuffer) throws -> MeltMethodSettings {
    return try FfiConverterTypeMeltMethodSettings.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMeltMethodSettings_lower(_ value: MeltMethodSettings) -> RustBuffer {
    return FfiConverterTypeMeltMethodSettings.lower(value)
}


/**
 * FFI-compatible MeltQuote
 */
public struct MeltQuote {
    /**
     * Quote ID
     */
    public var id: String
    /**
     * Quote amount
     */
    public var amount: Amount
    /**
     * Currency unit
     */
    public var unit: CurrencyUnit
    /**
     * Payment request
     */
    public var request: String
    /**
     * Fee reserve
     */
    public var feeReserve: Amount
    /**
     * Quote state
     */
    public var state: QuoteState
    /**
     * Expiry timestamp
     */
    public var expiry: UInt64
    /**
     * Payment preimage
     */
    public var paymentPreimage: String?
    /**
     * Payment method
     */
    public var paymentMethod: PaymentMethod

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Quote ID
         */id: String, 
        /**
         * Quote amount
         */amount: Amount, 
        /**
         * Currency unit
         */unit: CurrencyUnit, 
        /**
         * Payment request
         */request: String, 
        /**
         * Fee reserve
         */feeReserve: Amount, 
        /**
         * Quote state
         */state: QuoteState, 
        /**
         * Expiry timestamp
         */expiry: UInt64, 
        /**
         * Payment preimage
         */paymentPreimage: String?, 
        /**
         * Payment method
         */paymentMethod: PaymentMethod) {
        self.id = id
        self.amount = amount
        self.unit = unit
        self.request = request
        self.feeReserve = feeReserve
        self.state = state
        self.expiry = expiry
        self.paymentPreimage = paymentPreimage
        self.paymentMethod = paymentMethod
    }
}

#if compiler(>=6)
extension MeltQuote: Sendable {}
#endif


extension MeltQuote: Equatable, Hashable {
    public static func ==(lhs: MeltQuote, rhs: MeltQuote) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.unit != rhs.unit {
            return false
        }
        if lhs.request != rhs.request {
            return false
        }
        if lhs.feeReserve != rhs.feeReserve {
            return false
        }
        if lhs.state != rhs.state {
            return false
        }
        if lhs.expiry != rhs.expiry {
            return false
        }
        if lhs.paymentPreimage != rhs.paymentPreimage {
            return false
        }
        if lhs.paymentMethod != rhs.paymentMethod {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(amount)
        hasher.combine(unit)
        hasher.combine(request)
        hasher.combine(feeReserve)
        hasher.combine(state)
        hasher.combine(expiry)
        hasher.combine(paymentPreimage)
        hasher.combine(paymentMethod)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMeltQuote: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MeltQuote {
        return
            try MeltQuote(
                id: FfiConverterString.read(from: &buf), 
                amount: FfiConverterTypeAmount.read(from: &buf), 
                unit: FfiConverterTypeCurrencyUnit.read(from: &buf), 
                request: FfiConverterString.read(from: &buf), 
                feeReserve: FfiConverterTypeAmount.read(from: &buf), 
                state: FfiConverterTypeQuoteState.read(from: &buf), 
                expiry: FfiConverterUInt64.read(from: &buf), 
                paymentPreimage: FfiConverterOptionString.read(from: &buf), 
                paymentMethod: FfiConverterTypePaymentMethod.read(from: &buf)
        )
    }

    public static func write(_ value: MeltQuote, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterTypeAmount.write(value.amount, into: &buf)
        FfiConverterTypeCurrencyUnit.write(value.unit, into: &buf)
        FfiConverterString.write(value.request, into: &buf)
        FfiConverterTypeAmount.write(value.feeReserve, into: &buf)
        FfiConverterTypeQuoteState.write(value.state, into: &buf)
        FfiConverterUInt64.write(value.expiry, into: &buf)
        FfiConverterOptionString.write(value.paymentPreimage, into: &buf)
        FfiConverterTypePaymentMethod.write(value.paymentMethod, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMeltQuote_lift(_ buf: RustBuffer) throws -> MeltQuote {
    return try FfiConverterTypeMeltQuote.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMeltQuote_lower(_ value: MeltQuote) -> RustBuffer {
    return FfiConverterTypeMeltQuote.lower(value)
}


/**
 * FFI-compatible Melted result
 */
public struct Melted {
    public var state: QuoteState
    public var preimage: String?
    public var change: [Proof]?
    public var amount: Amount
    public var feePaid: Amount

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(state: QuoteState, preimage: String?, change: [Proof]?, amount: Amount, feePaid: Amount) {
        self.state = state
        self.preimage = preimage
        self.change = change
        self.amount = amount
        self.feePaid = feePaid
    }
}

#if compiler(>=6)
extension Melted: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMelted: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Melted {
        return
            try Melted(
                state: FfiConverterTypeQuoteState.read(from: &buf), 
                preimage: FfiConverterOptionString.read(from: &buf), 
                change: FfiConverterOptionSequenceTypeProof.read(from: &buf), 
                amount: FfiConverterTypeAmount.read(from: &buf), 
                feePaid: FfiConverterTypeAmount.read(from: &buf)
        )
    }

    public static func write(_ value: Melted, into buf: inout [UInt8]) {
        FfiConverterTypeQuoteState.write(value.state, into: &buf)
        FfiConverterOptionString.write(value.preimage, into: &buf)
        FfiConverterOptionSequenceTypeProof.write(value.change, into: &buf)
        FfiConverterTypeAmount.write(value.amount, into: &buf)
        FfiConverterTypeAmount.write(value.feePaid, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMelted_lift(_ buf: RustBuffer) throws -> Melted {
    return try FfiConverterTypeMelted.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMelted_lower(_ value: Melted) -> RustBuffer {
    return FfiConverterTypeMelted.lower(value)
}


/**
 * FFI-compatible MintInfo
 */
public struct MintInfo {
    /**
     * name of the mint and should be recognizable
     */
    public var name: String?
    /**
     * hex pubkey of the mint
     */
    public var pubkey: String?
    /**
     * implementation name and the version running
     */
    public var version: MintVersion?
    /**
     * short description of the mint
     */
    public var description: String?
    /**
     * long description
     */
    public var descriptionLong: String?
    /**
     * Contact info
     */
    public var contact: [ContactInfo]?
    /**
     * shows which NUTs the mint supports
     */
    public var nuts: Nuts
    /**
     * Mint's icon URL
     */
    public var iconUrl: String?
    /**
     * Mint's endpoint URLs
     */
    public var urls: [String]?
    /**
     * message of the day that the wallet must display to the user
     */
    public var motd: String?
    /**
     * server unix timestamp
     */
    public var time: UInt64?
    /**
     * terms of url service of the mint
     */
    public var tosUrl: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * name of the mint and should be recognizable
         */name: String?, 
        /**
         * hex pubkey of the mint
         */pubkey: String?, 
        /**
         * implementation name and the version running
         */version: MintVersion?, 
        /**
         * short description of the mint
         */description: String?, 
        /**
         * long description
         */descriptionLong: String?, 
        /**
         * Contact info
         */contact: [ContactInfo]?, 
        /**
         * shows which NUTs the mint supports
         */nuts: Nuts, 
        /**
         * Mint's icon URL
         */iconUrl: String?, 
        /**
         * Mint's endpoint URLs
         */urls: [String]?, 
        /**
         * message of the day that the wallet must display to the user
         */motd: String?, 
        /**
         * server unix timestamp
         */time: UInt64?, 
        /**
         * terms of url service of the mint
         */tosUrl: String?) {
        self.name = name
        self.pubkey = pubkey
        self.version = version
        self.description = description
        self.descriptionLong = descriptionLong
        self.contact = contact
        self.nuts = nuts
        self.iconUrl = iconUrl
        self.urls = urls
        self.motd = motd
        self.time = time
        self.tosUrl = tosUrl
    }
}

#if compiler(>=6)
extension MintInfo: Sendable {}
#endif


extension MintInfo: Equatable, Hashable {
    public static func ==(lhs: MintInfo, rhs: MintInfo) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.pubkey != rhs.pubkey {
            return false
        }
        if lhs.version != rhs.version {
            return false
        }
        if lhs.description != rhs.description {
            return false
        }
        if lhs.descriptionLong != rhs.descriptionLong {
            return false
        }
        if lhs.contact != rhs.contact {
            return false
        }
        if lhs.nuts != rhs.nuts {
            return false
        }
        if lhs.iconUrl != rhs.iconUrl {
            return false
        }
        if lhs.urls != rhs.urls {
            return false
        }
        if lhs.motd != rhs.motd {
            return false
        }
        if lhs.time != rhs.time {
            return false
        }
        if lhs.tosUrl != rhs.tosUrl {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(pubkey)
        hasher.combine(version)
        hasher.combine(description)
        hasher.combine(descriptionLong)
        hasher.combine(contact)
        hasher.combine(nuts)
        hasher.combine(iconUrl)
        hasher.combine(urls)
        hasher.combine(motd)
        hasher.combine(time)
        hasher.combine(tosUrl)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMintInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MintInfo {
        return
            try MintInfo(
                name: FfiConverterOptionString.read(from: &buf), 
                pubkey: FfiConverterOptionString.read(from: &buf), 
                version: FfiConverterOptionTypeMintVersion.read(from: &buf), 
                description: FfiConverterOptionString.read(from: &buf), 
                descriptionLong: FfiConverterOptionString.read(from: &buf), 
                contact: FfiConverterOptionSequenceTypeContactInfo.read(from: &buf), 
                nuts: FfiConverterTypeNuts.read(from: &buf), 
                iconUrl: FfiConverterOptionString.read(from: &buf), 
                urls: FfiConverterOptionSequenceString.read(from: &buf), 
                motd: FfiConverterOptionString.read(from: &buf), 
                time: FfiConverterOptionUInt64.read(from: &buf), 
                tosUrl: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: MintInfo, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.name, into: &buf)
        FfiConverterOptionString.write(value.pubkey, into: &buf)
        FfiConverterOptionTypeMintVersion.write(value.version, into: &buf)
        FfiConverterOptionString.write(value.description, into: &buf)
        FfiConverterOptionString.write(value.descriptionLong, into: &buf)
        FfiConverterOptionSequenceTypeContactInfo.write(value.contact, into: &buf)
        FfiConverterTypeNuts.write(value.nuts, into: &buf)
        FfiConverterOptionString.write(value.iconUrl, into: &buf)
        FfiConverterOptionSequenceString.write(value.urls, into: &buf)
        FfiConverterOptionString.write(value.motd, into: &buf)
        FfiConverterOptionUInt64.write(value.time, into: &buf)
        FfiConverterOptionString.write(value.tosUrl, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMintInfo_lift(_ buf: RustBuffer) throws -> MintInfo {
    return try FfiConverterTypeMintInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMintInfo_lower(_ value: MintInfo) -> RustBuffer {
    return FfiConverterTypeMintInfo.lower(value)
}


/**
 * FFI-compatible MintMethodSettings (NUT-04)
 */
public struct MintMethodSettings {
    public var method: PaymentMethod
    public var unit: CurrencyUnit
    public var minAmount: Amount?
    public var maxAmount: Amount?
    /**
     * For bolt11, whether mint supports setting invoice description
     */
    public var description: Bool?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(method: PaymentMethod, unit: CurrencyUnit, minAmount: Amount?, maxAmount: Amount?, 
        /**
         * For bolt11, whether mint supports setting invoice description
         */description: Bool?) {
        self.method = method
        self.unit = unit
        self.minAmount = minAmount
        self.maxAmount = maxAmount
        self.description = description
    }
}

#if compiler(>=6)
extension MintMethodSettings: Sendable {}
#endif


extension MintMethodSettings: Equatable, Hashable {
    public static func ==(lhs: MintMethodSettings, rhs: MintMethodSettings) -> Bool {
        if lhs.method != rhs.method {
            return false
        }
        if lhs.unit != rhs.unit {
            return false
        }
        if lhs.minAmount != rhs.minAmount {
            return false
        }
        if lhs.maxAmount != rhs.maxAmount {
            return false
        }
        if lhs.description != rhs.description {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(method)
        hasher.combine(unit)
        hasher.combine(minAmount)
        hasher.combine(maxAmount)
        hasher.combine(description)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMintMethodSettings: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MintMethodSettings {
        return
            try MintMethodSettings(
                method: FfiConverterTypePaymentMethod.read(from: &buf), 
                unit: FfiConverterTypeCurrencyUnit.read(from: &buf), 
                minAmount: FfiConverterOptionTypeAmount.read(from: &buf), 
                maxAmount: FfiConverterOptionTypeAmount.read(from: &buf), 
                description: FfiConverterOptionBool.read(from: &buf)
        )
    }

    public static func write(_ value: MintMethodSettings, into buf: inout [UInt8]) {
        FfiConverterTypePaymentMethod.write(value.method, into: &buf)
        FfiConverterTypeCurrencyUnit.write(value.unit, into: &buf)
        FfiConverterOptionTypeAmount.write(value.minAmount, into: &buf)
        FfiConverterOptionTypeAmount.write(value.maxAmount, into: &buf)
        FfiConverterOptionBool.write(value.description, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMintMethodSettings_lift(_ buf: RustBuffer) throws -> MintMethodSettings {
    return try FfiConverterTypeMintMethodSettings.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMintMethodSettings_lower(_ value: MintMethodSettings) -> RustBuffer {
    return FfiConverterTypeMintMethodSettings.lower(value)
}


/**
 * FFI-compatible MintQuote
 */
public struct MintQuote {
    /**
     * Quote ID
     */
    public var id: String
    /**
     * Quote amount
     */
    public var amount: Amount?
    /**
     * Currency unit
     */
    public var unit: CurrencyUnit
    /**
     * Payment request
     */
    public var request: String
    /**
     * Quote state
     */
    public var state: QuoteState
    /**
     * Expiry timestamp
     */
    public var expiry: UInt64
    /**
     * Mint URL
     */
    public var mintUrl: MintUrl
    /**
     * Amount issued
     */
    public var amountIssued: Amount
    /**
     * Amount paid
     */
    public var amountPaid: Amount
    /**
     * Payment method
     */
    public var paymentMethod: PaymentMethod
    /**
     * Secret key (optional, hex-encoded)
     */
    public var secretKey: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Quote ID
         */id: String, 
        /**
         * Quote amount
         */amount: Amount?, 
        /**
         * Currency unit
         */unit: CurrencyUnit, 
        /**
         * Payment request
         */request: String, 
        /**
         * Quote state
         */state: QuoteState, 
        /**
         * Expiry timestamp
         */expiry: UInt64, 
        /**
         * Mint URL
         */mintUrl: MintUrl, 
        /**
         * Amount issued
         */amountIssued: Amount, 
        /**
         * Amount paid
         */amountPaid: Amount, 
        /**
         * Payment method
         */paymentMethod: PaymentMethod, 
        /**
         * Secret key (optional, hex-encoded)
         */secretKey: String?) {
        self.id = id
        self.amount = amount
        self.unit = unit
        self.request = request
        self.state = state
        self.expiry = expiry
        self.mintUrl = mintUrl
        self.amountIssued = amountIssued
        self.amountPaid = amountPaid
        self.paymentMethod = paymentMethod
        self.secretKey = secretKey
    }
}

#if compiler(>=6)
extension MintQuote: Sendable {}
#endif


extension MintQuote: Equatable, Hashable {
    public static func ==(lhs: MintQuote, rhs: MintQuote) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.unit != rhs.unit {
            return false
        }
        if lhs.request != rhs.request {
            return false
        }
        if lhs.state != rhs.state {
            return false
        }
        if lhs.expiry != rhs.expiry {
            return false
        }
        if lhs.mintUrl != rhs.mintUrl {
            return false
        }
        if lhs.amountIssued != rhs.amountIssued {
            return false
        }
        if lhs.amountPaid != rhs.amountPaid {
            return false
        }
        if lhs.paymentMethod != rhs.paymentMethod {
            return false
        }
        if lhs.secretKey != rhs.secretKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(amount)
        hasher.combine(unit)
        hasher.combine(request)
        hasher.combine(state)
        hasher.combine(expiry)
        hasher.combine(mintUrl)
        hasher.combine(amountIssued)
        hasher.combine(amountPaid)
        hasher.combine(paymentMethod)
        hasher.combine(secretKey)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMintQuote: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MintQuote {
        return
            try MintQuote(
                id: FfiConverterString.read(from: &buf), 
                amount: FfiConverterOptionTypeAmount.read(from: &buf), 
                unit: FfiConverterTypeCurrencyUnit.read(from: &buf), 
                request: FfiConverterString.read(from: &buf), 
                state: FfiConverterTypeQuoteState.read(from: &buf), 
                expiry: FfiConverterUInt64.read(from: &buf), 
                mintUrl: FfiConverterTypeMintUrl.read(from: &buf), 
                amountIssued: FfiConverterTypeAmount.read(from: &buf), 
                amountPaid: FfiConverterTypeAmount.read(from: &buf), 
                paymentMethod: FfiConverterTypePaymentMethod.read(from: &buf), 
                secretKey: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: MintQuote, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterOptionTypeAmount.write(value.amount, into: &buf)
        FfiConverterTypeCurrencyUnit.write(value.unit, into: &buf)
        FfiConverterString.write(value.request, into: &buf)
        FfiConverterTypeQuoteState.write(value.state, into: &buf)
        FfiConverterUInt64.write(value.expiry, into: &buf)
        FfiConverterTypeMintUrl.write(value.mintUrl, into: &buf)
        FfiConverterTypeAmount.write(value.amountIssued, into: &buf)
        FfiConverterTypeAmount.write(value.amountPaid, into: &buf)
        FfiConverterTypePaymentMethod.write(value.paymentMethod, into: &buf)
        FfiConverterOptionString.write(value.secretKey, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMintQuote_lift(_ buf: RustBuffer) throws -> MintQuote {
    return try FfiConverterTypeMintQuote.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMintQuote_lower(_ value: MintQuote) -> RustBuffer {
    return FfiConverterTypeMintQuote.lower(value)
}


/**
 * FFI-compatible Mint URL
 */
public struct MintUrl {
    public var url: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(url: String) {
        self.url = url
    }
}

#if compiler(>=6)
extension MintUrl: Sendable {}
#endif


extension MintUrl: Equatable, Hashable {
    public static func ==(lhs: MintUrl, rhs: MintUrl) -> Bool {
        if lhs.url != rhs.url {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(url)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMintUrl: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MintUrl {
        return
            try MintUrl(
                url: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: MintUrl, into buf: inout [UInt8]) {
        FfiConverterString.write(value.url, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMintUrl_lift(_ buf: RustBuffer) throws -> MintUrl {
    return try FfiConverterTypeMintUrl.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMintUrl_lower(_ value: MintUrl) -> RustBuffer {
    return FfiConverterTypeMintUrl.lower(value)
}


/**
 * FFI-compatible MintVersion
 */
public struct MintVersion {
    /**
     * Mint Software name
     */
    public var name: String
    /**
     * Mint Version
     */
    public var version: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Mint Software name
         */name: String, 
        /**
         * Mint Version
         */version: String) {
        self.name = name
        self.version = version
    }
}

#if compiler(>=6)
extension MintVersion: Sendable {}
#endif


extension MintVersion: Equatable, Hashable {
    public static func ==(lhs: MintVersion, rhs: MintVersion) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.version != rhs.version {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(version)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMintVersion: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MintVersion {
        return
            try MintVersion(
                name: FfiConverterString.read(from: &buf), 
                version: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: MintVersion, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.version, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMintVersion_lift(_ buf: RustBuffer) throws -> MintVersion {
    return try FfiConverterTypeMintVersion.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMintVersion_lower(_ value: MintVersion) -> RustBuffer {
    return FfiConverterTypeMintVersion.lower(value)
}


/**
 * Options for receiving tokens in multi-mint context
 */
public struct MultiMintReceiveOptions {
    /**
     * Whether to allow receiving from untrusted (not yet added) mints
     */
    public var allowUntrusted: Bool
    /**
     * Mint URL to transfer tokens to from untrusted mints (None means keep in original mint)
     */
    public var transferToMint: MintUrl?
    /**
     * Base receive options to apply to the wallet receive
     */
    public var receiveOptions: ReceiveOptions

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Whether to allow receiving from untrusted (not yet added) mints
         */allowUntrusted: Bool, 
        /**
         * Mint URL to transfer tokens to from untrusted mints (None means keep in original mint)
         */transferToMint: MintUrl?, 
        /**
         * Base receive options to apply to the wallet receive
         */receiveOptions: ReceiveOptions) {
        self.allowUntrusted = allowUntrusted
        self.transferToMint = transferToMint
        self.receiveOptions = receiveOptions
    }
}

#if compiler(>=6)
extension MultiMintReceiveOptions: Sendable {}
#endif


extension MultiMintReceiveOptions: Equatable, Hashable {
    public static func ==(lhs: MultiMintReceiveOptions, rhs: MultiMintReceiveOptions) -> Bool {
        if lhs.allowUntrusted != rhs.allowUntrusted {
            return false
        }
        if lhs.transferToMint != rhs.transferToMint {
            return false
        }
        if lhs.receiveOptions != rhs.receiveOptions {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(allowUntrusted)
        hasher.combine(transferToMint)
        hasher.combine(receiveOptions)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMultiMintReceiveOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MultiMintReceiveOptions {
        return
            try MultiMintReceiveOptions(
                allowUntrusted: FfiConverterBool.read(from: &buf), 
                transferToMint: FfiConverterOptionTypeMintUrl.read(from: &buf), 
                receiveOptions: FfiConverterTypeReceiveOptions.read(from: &buf)
        )
    }

    public static func write(_ value: MultiMintReceiveOptions, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.allowUntrusted, into: &buf)
        FfiConverterOptionTypeMintUrl.write(value.transferToMint, into: &buf)
        FfiConverterTypeReceiveOptions.write(value.receiveOptions, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMultiMintReceiveOptions_lift(_ buf: RustBuffer) throws -> MultiMintReceiveOptions {
    return try FfiConverterTypeMultiMintReceiveOptions.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMultiMintReceiveOptions_lower(_ value: MultiMintReceiveOptions) -> RustBuffer {
    return FfiConverterTypeMultiMintReceiveOptions.lower(value)
}


/**
 * Options for sending tokens in multi-mint context
 */
public struct MultiMintSendOptions {
    /**
     * Whether to allow transferring funds from other mints if needed
     */
    public var allowTransfer: Bool
    /**
     * Maximum amount to transfer from other mints (optional limit)
     */
    public var maxTransferAmount: Amount?
    /**
     * Specific mint URLs allowed for transfers (empty means all mints allowed)
     */
    public var allowedMints: [MintUrl]
    /**
     * Specific mint URLs to exclude from transfers
     */
    public var excludedMints: [MintUrl]
    /**
     * Base send options to apply to the wallet send
     */
    public var sendOptions: SendOptions

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Whether to allow transferring funds from other mints if needed
         */allowTransfer: Bool, 
        /**
         * Maximum amount to transfer from other mints (optional limit)
         */maxTransferAmount: Amount?, 
        /**
         * Specific mint URLs allowed for transfers (empty means all mints allowed)
         */allowedMints: [MintUrl], 
        /**
         * Specific mint URLs to exclude from transfers
         */excludedMints: [MintUrl], 
        /**
         * Base send options to apply to the wallet send
         */sendOptions: SendOptions) {
        self.allowTransfer = allowTransfer
        self.maxTransferAmount = maxTransferAmount
        self.allowedMints = allowedMints
        self.excludedMints = excludedMints
        self.sendOptions = sendOptions
    }
}

#if compiler(>=6)
extension MultiMintSendOptions: Sendable {}
#endif


extension MultiMintSendOptions: Equatable, Hashable {
    public static func ==(lhs: MultiMintSendOptions, rhs: MultiMintSendOptions) -> Bool {
        if lhs.allowTransfer != rhs.allowTransfer {
            return false
        }
        if lhs.maxTransferAmount != rhs.maxTransferAmount {
            return false
        }
        if lhs.allowedMints != rhs.allowedMints {
            return false
        }
        if lhs.excludedMints != rhs.excludedMints {
            return false
        }
        if lhs.sendOptions != rhs.sendOptions {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(allowTransfer)
        hasher.combine(maxTransferAmount)
        hasher.combine(allowedMints)
        hasher.combine(excludedMints)
        hasher.combine(sendOptions)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMultiMintSendOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MultiMintSendOptions {
        return
            try MultiMintSendOptions(
                allowTransfer: FfiConverterBool.read(from: &buf), 
                maxTransferAmount: FfiConverterOptionTypeAmount.read(from: &buf), 
                allowedMints: FfiConverterSequenceTypeMintUrl.read(from: &buf), 
                excludedMints: FfiConverterSequenceTypeMintUrl.read(from: &buf), 
                sendOptions: FfiConverterTypeSendOptions.read(from: &buf)
        )
    }

    public static func write(_ value: MultiMintSendOptions, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.allowTransfer, into: &buf)
        FfiConverterOptionTypeAmount.write(value.maxTransferAmount, into: &buf)
        FfiConverterSequenceTypeMintUrl.write(value.allowedMints, into: &buf)
        FfiConverterSequenceTypeMintUrl.write(value.excludedMints, into: &buf)
        FfiConverterTypeSendOptions.write(value.sendOptions, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMultiMintSendOptions_lift(_ buf: RustBuffer) throws -> MultiMintSendOptions {
    return try FfiConverterTypeMultiMintSendOptions.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMultiMintSendOptions_lower(_ value: MultiMintSendOptions) -> RustBuffer {
    return FfiConverterTypeMultiMintSendOptions.lower(value)
}


/**
 * FFI-compatible Nut04 Settings
 */
public struct Nut04Settings {
    public var methods: [MintMethodSettings]
    public var disabled: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(methods: [MintMethodSettings], disabled: Bool) {
        self.methods = methods
        self.disabled = disabled
    }
}

#if compiler(>=6)
extension Nut04Settings: Sendable {}
#endif


extension Nut04Settings: Equatable, Hashable {
    public static func ==(lhs: Nut04Settings, rhs: Nut04Settings) -> Bool {
        if lhs.methods != rhs.methods {
            return false
        }
        if lhs.disabled != rhs.disabled {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(methods)
        hasher.combine(disabled)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNut04Settings: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Nut04Settings {
        return
            try Nut04Settings(
                methods: FfiConverterSequenceTypeMintMethodSettings.read(from: &buf), 
                disabled: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: Nut04Settings, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeMintMethodSettings.write(value.methods, into: &buf)
        FfiConverterBool.write(value.disabled, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNut04Settings_lift(_ buf: RustBuffer) throws -> Nut04Settings {
    return try FfiConverterTypeNut04Settings.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNut04Settings_lower(_ value: Nut04Settings) -> RustBuffer {
    return FfiConverterTypeNut04Settings.lower(value)
}


/**
 * FFI-compatible Nut05 Settings
 */
public struct Nut05Settings {
    public var methods: [MeltMethodSettings]
    public var disabled: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(methods: [MeltMethodSettings], disabled: Bool) {
        self.methods = methods
        self.disabled = disabled
    }
}

#if compiler(>=6)
extension Nut05Settings: Sendable {}
#endif


extension Nut05Settings: Equatable, Hashable {
    public static func ==(lhs: Nut05Settings, rhs: Nut05Settings) -> Bool {
        if lhs.methods != rhs.methods {
            return false
        }
        if lhs.disabled != rhs.disabled {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(methods)
        hasher.combine(disabled)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNut05Settings: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Nut05Settings {
        return
            try Nut05Settings(
                methods: FfiConverterSequenceTypeMeltMethodSettings.read(from: &buf), 
                disabled: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: Nut05Settings, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeMeltMethodSettings.write(value.methods, into: &buf)
        FfiConverterBool.write(value.disabled, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNut05Settings_lift(_ buf: RustBuffer) throws -> Nut05Settings {
    return try FfiConverterTypeNut05Settings.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNut05Settings_lower(_ value: Nut05Settings) -> RustBuffer {
    return FfiConverterTypeNut05Settings.lower(value)
}


/**
 * FFI-compatible Nuts settings (extended to include NUT-04 and NUT-05 settings)
 */
public struct Nuts {
    /**
     * NUT04 Settings
     */
    public var nut04: Nut04Settings
    /**
     * NUT05 Settings
     */
    public var nut05: Nut05Settings
    /**
     * NUT07 Settings - Token state check
     */
    public var nut07Supported: Bool
    /**
     * NUT08 Settings - Lightning fee return
     */
    public var nut08Supported: Bool
    /**
     * NUT09 Settings - Restore signature
     */
    public var nut09Supported: Bool
    /**
     * NUT10 Settings - Spending conditions
     */
    public var nut10Supported: Bool
    /**
     * NUT11 Settings - Pay to Public Key Hash
     */
    public var nut11Supported: Bool
    /**
     * NUT12 Settings - DLEQ proofs
     */
    public var nut12Supported: Bool
    /**
     * NUT14 Settings - Hashed Time Locked Contracts
     */
    public var nut14Supported: Bool
    /**
     * NUT20 Settings - Web sockets
     */
    public var nut20Supported: Bool
    /**
     * NUT21 Settings - Clear authentication
     */
    public var nut21: ClearAuthSettings?
    /**
     * NUT22 Settings - Blind authentication
     */
    public var nut22: BlindAuthSettings?
    /**
     * Supported currency units for minting
     */
    public var mintUnits: [CurrencyUnit]
    /**
     * Supported currency units for melting
     */
    public var meltUnits: [CurrencyUnit]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * NUT04 Settings
         */nut04: Nut04Settings, 
        /**
         * NUT05 Settings
         */nut05: Nut05Settings, 
        /**
         * NUT07 Settings - Token state check
         */nut07Supported: Bool, 
        /**
         * NUT08 Settings - Lightning fee return
         */nut08Supported: Bool, 
        /**
         * NUT09 Settings - Restore signature
         */nut09Supported: Bool, 
        /**
         * NUT10 Settings - Spending conditions
         */nut10Supported: Bool, 
        /**
         * NUT11 Settings - Pay to Public Key Hash
         */nut11Supported: Bool, 
        /**
         * NUT12 Settings - DLEQ proofs
         */nut12Supported: Bool, 
        /**
         * NUT14 Settings - Hashed Time Locked Contracts
         */nut14Supported: Bool, 
        /**
         * NUT20 Settings - Web sockets
         */nut20Supported: Bool, 
        /**
         * NUT21 Settings - Clear authentication
         */nut21: ClearAuthSettings?, 
        /**
         * NUT22 Settings - Blind authentication
         */nut22: BlindAuthSettings?, 
        /**
         * Supported currency units for minting
         */mintUnits: [CurrencyUnit], 
        /**
         * Supported currency units for melting
         */meltUnits: [CurrencyUnit]) {
        self.nut04 = nut04
        self.nut05 = nut05
        self.nut07Supported = nut07Supported
        self.nut08Supported = nut08Supported
        self.nut09Supported = nut09Supported
        self.nut10Supported = nut10Supported
        self.nut11Supported = nut11Supported
        self.nut12Supported = nut12Supported
        self.nut14Supported = nut14Supported
        self.nut20Supported = nut20Supported
        self.nut21 = nut21
        self.nut22 = nut22
        self.mintUnits = mintUnits
        self.meltUnits = meltUnits
    }
}

#if compiler(>=6)
extension Nuts: Sendable {}
#endif


extension Nuts: Equatable, Hashable {
    public static func ==(lhs: Nuts, rhs: Nuts) -> Bool {
        if lhs.nut04 != rhs.nut04 {
            return false
        }
        if lhs.nut05 != rhs.nut05 {
            return false
        }
        if lhs.nut07Supported != rhs.nut07Supported {
            return false
        }
        if lhs.nut08Supported != rhs.nut08Supported {
            return false
        }
        if lhs.nut09Supported != rhs.nut09Supported {
            return false
        }
        if lhs.nut10Supported != rhs.nut10Supported {
            return false
        }
        if lhs.nut11Supported != rhs.nut11Supported {
            return false
        }
        if lhs.nut12Supported != rhs.nut12Supported {
            return false
        }
        if lhs.nut14Supported != rhs.nut14Supported {
            return false
        }
        if lhs.nut20Supported != rhs.nut20Supported {
            return false
        }
        if lhs.nut21 != rhs.nut21 {
            return false
        }
        if lhs.nut22 != rhs.nut22 {
            return false
        }
        if lhs.mintUnits != rhs.mintUnits {
            return false
        }
        if lhs.meltUnits != rhs.meltUnits {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(nut04)
        hasher.combine(nut05)
        hasher.combine(nut07Supported)
        hasher.combine(nut08Supported)
        hasher.combine(nut09Supported)
        hasher.combine(nut10Supported)
        hasher.combine(nut11Supported)
        hasher.combine(nut12Supported)
        hasher.combine(nut14Supported)
        hasher.combine(nut20Supported)
        hasher.combine(nut21)
        hasher.combine(nut22)
        hasher.combine(mintUnits)
        hasher.combine(meltUnits)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNuts: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Nuts {
        return
            try Nuts(
                nut04: FfiConverterTypeNut04Settings.read(from: &buf), 
                nut05: FfiConverterTypeNut05Settings.read(from: &buf), 
                nut07Supported: FfiConverterBool.read(from: &buf), 
                nut08Supported: FfiConverterBool.read(from: &buf), 
                nut09Supported: FfiConverterBool.read(from: &buf), 
                nut10Supported: FfiConverterBool.read(from: &buf), 
                nut11Supported: FfiConverterBool.read(from: &buf), 
                nut12Supported: FfiConverterBool.read(from: &buf), 
                nut14Supported: FfiConverterBool.read(from: &buf), 
                nut20Supported: FfiConverterBool.read(from: &buf), 
                nut21: FfiConverterOptionTypeClearAuthSettings.read(from: &buf), 
                nut22: FfiConverterOptionTypeBlindAuthSettings.read(from: &buf), 
                mintUnits: FfiConverterSequenceTypeCurrencyUnit.read(from: &buf), 
                meltUnits: FfiConverterSequenceTypeCurrencyUnit.read(from: &buf)
        )
    }

    public static func write(_ value: Nuts, into buf: inout [UInt8]) {
        FfiConverterTypeNut04Settings.write(value.nut04, into: &buf)
        FfiConverterTypeNut05Settings.write(value.nut05, into: &buf)
        FfiConverterBool.write(value.nut07Supported, into: &buf)
        FfiConverterBool.write(value.nut08Supported, into: &buf)
        FfiConverterBool.write(value.nut09Supported, into: &buf)
        FfiConverterBool.write(value.nut10Supported, into: &buf)
        FfiConverterBool.write(value.nut11Supported, into: &buf)
        FfiConverterBool.write(value.nut12Supported, into: &buf)
        FfiConverterBool.write(value.nut14Supported, into: &buf)
        FfiConverterBool.write(value.nut20Supported, into: &buf)
        FfiConverterOptionTypeClearAuthSettings.write(value.nut21, into: &buf)
        FfiConverterOptionTypeBlindAuthSettings.write(value.nut22, into: &buf)
        FfiConverterSequenceTypeCurrencyUnit.write(value.mintUnits, into: &buf)
        FfiConverterSequenceTypeCurrencyUnit.write(value.meltUnits, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNuts_lift(_ buf: RustBuffer) throws -> Nuts {
    return try FfiConverterTypeNuts.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNuts_lower(_ value: Nuts) -> RustBuffer {
    return FfiConverterTypeNuts.lower(value)
}


/**
 * FFI-compatible DLEQ proof for proofs
 */
public struct ProofDleq {
    /**
     * e value (hex-encoded SecretKey)
     */
    public var e: String
    /**
     * s value (hex-encoded SecretKey)
     */
    public var s: String
    /**
     * r value - blinding factor (hex-encoded SecretKey)
     */
    public var r: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * e value (hex-encoded SecretKey)
         */e: String, 
        /**
         * s value (hex-encoded SecretKey)
         */s: String, 
        /**
         * r value - blinding factor (hex-encoded SecretKey)
         */r: String) {
        self.e = e
        self.s = s
        self.r = r
    }
}

#if compiler(>=6)
extension ProofDleq: Sendable {}
#endif


extension ProofDleq: Equatable, Hashable {
    public static func ==(lhs: ProofDleq, rhs: ProofDleq) -> Bool {
        if lhs.e != rhs.e {
            return false
        }
        if lhs.s != rhs.s {
            return false
        }
        if lhs.r != rhs.r {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(e)
        hasher.combine(s)
        hasher.combine(r)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProofDleq: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProofDleq {
        return
            try ProofDleq(
                e: FfiConverterString.read(from: &buf), 
                s: FfiConverterString.read(from: &buf), 
                r: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: ProofDleq, into buf: inout [UInt8]) {
        FfiConverterString.write(value.e, into: &buf)
        FfiConverterString.write(value.s, into: &buf)
        FfiConverterString.write(value.r, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProofDleq_lift(_ buf: RustBuffer) throws -> ProofDleq {
    return try FfiConverterTypeProofDleq.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProofDleq_lower(_ value: ProofDleq) -> RustBuffer {
    return FfiConverterTypeProofDleq.lower(value)
}


/**
 * FFI-compatible ProofInfo
 */
public struct ProofInfo {
    /**
     * Proof
     */
    public var proof: Proof
    /**
     * Y value (hash_to_curve of secret)
     */
    public var y: PublicKey
    /**
     * Mint URL
     */
    public var mintUrl: MintUrl
    /**
     * Proof state
     */
    public var state: ProofState
    /**
     * Proof Spending Conditions
     */
    public var spendingCondition: SpendingConditions?
    /**
     * Currency unit
     */
    public var unit: CurrencyUnit

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Proof
         */proof: Proof, 
        /**
         * Y value (hash_to_curve of secret)
         */y: PublicKey, 
        /**
         * Mint URL
         */mintUrl: MintUrl, 
        /**
         * Proof state
         */state: ProofState, 
        /**
         * Proof Spending Conditions
         */spendingCondition: SpendingConditions?, 
        /**
         * Currency unit
         */unit: CurrencyUnit) {
        self.proof = proof
        self.y = y
        self.mintUrl = mintUrl
        self.state = state
        self.spendingCondition = spendingCondition
        self.unit = unit
    }
}

#if compiler(>=6)
extension ProofInfo: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProofInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProofInfo {
        return
            try ProofInfo(
                proof: FfiConverterTypeProof.read(from: &buf), 
                y: FfiConverterTypePublicKey.read(from: &buf), 
                mintUrl: FfiConverterTypeMintUrl.read(from: &buf), 
                state: FfiConverterTypeProofState.read(from: &buf), 
                spendingCondition: FfiConverterOptionTypeSpendingConditions.read(from: &buf), 
                unit: FfiConverterTypeCurrencyUnit.read(from: &buf)
        )
    }

    public static func write(_ value: ProofInfo, into buf: inout [UInt8]) {
        FfiConverterTypeProof.write(value.proof, into: &buf)
        FfiConverterTypePublicKey.write(value.y, into: &buf)
        FfiConverterTypeMintUrl.write(value.mintUrl, into: &buf)
        FfiConverterTypeProofState.write(value.state, into: &buf)
        FfiConverterOptionTypeSpendingConditions.write(value.spendingCondition, into: &buf)
        FfiConverterTypeCurrencyUnit.write(value.unit, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProofInfo_lift(_ buf: RustBuffer) throws -> ProofInfo {
    return try FfiConverterTypeProofInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProofInfo_lower(_ value: ProofInfo) -> RustBuffer {
    return FfiConverterTypeProofInfo.lower(value)
}


/**
 * FFI-compatible ProofStateUpdate
 */
public struct ProofStateUpdate {
    /**
     * Y value (hash_to_curve of secret)
     */
    public var y: String
    /**
     * Current state
     */
    public var state: ProofState
    /**
     * Optional witness data
     */
    public var witness: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Y value (hash_to_curve of secret)
         */y: String, 
        /**
         * Current state
         */state: ProofState, 
        /**
         * Optional witness data
         */witness: String?) {
        self.y = y
        self.state = state
        self.witness = witness
    }
}

#if compiler(>=6)
extension ProofStateUpdate: Sendable {}
#endif


extension ProofStateUpdate: Equatable, Hashable {
    public static func ==(lhs: ProofStateUpdate, rhs: ProofStateUpdate) -> Bool {
        if lhs.y != rhs.y {
            return false
        }
        if lhs.state != rhs.state {
            return false
        }
        if lhs.witness != rhs.witness {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(y)
        hasher.combine(state)
        hasher.combine(witness)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProofStateUpdate: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProofStateUpdate {
        return
            try ProofStateUpdate(
                y: FfiConverterString.read(from: &buf), 
                state: FfiConverterTypeProofState.read(from: &buf), 
                witness: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: ProofStateUpdate, into buf: inout [UInt8]) {
        FfiConverterString.write(value.y, into: &buf)
        FfiConverterTypeProofState.write(value.state, into: &buf)
        FfiConverterOptionString.write(value.witness, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProofStateUpdate_lift(_ buf: RustBuffer) throws -> ProofStateUpdate {
    return try FfiConverterTypeProofStateUpdate.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProofStateUpdate_lower(_ value: ProofStateUpdate) -> RustBuffer {
    return FfiConverterTypeProofStateUpdate.lower(value)
}


/**
 * FFI-compatible ProtectedEndpoint (for auth nuts)
 */
public struct ProtectedEndpoint {
    /**
     * HTTP method (GET, POST, etc.)
     */
    public var method: String
    /**
     * Endpoint path
     */
    public var path: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * HTTP method (GET, POST, etc.)
         */method: String, 
        /**
         * Endpoint path
         */path: String) {
        self.method = method
        self.path = path
    }
}

#if compiler(>=6)
extension ProtectedEndpoint: Sendable {}
#endif


extension ProtectedEndpoint: Equatable, Hashable {
    public static func ==(lhs: ProtectedEndpoint, rhs: ProtectedEndpoint) -> Bool {
        if lhs.method != rhs.method {
            return false
        }
        if lhs.path != rhs.path {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(method)
        hasher.combine(path)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProtectedEndpoint: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProtectedEndpoint {
        return
            try ProtectedEndpoint(
                method: FfiConverterString.read(from: &buf), 
                path: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: ProtectedEndpoint, into buf: inout [UInt8]) {
        FfiConverterString.write(value.method, into: &buf)
        FfiConverterString.write(value.path, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProtectedEndpoint_lift(_ buf: RustBuffer) throws -> ProtectedEndpoint {
    return try FfiConverterTypeProtectedEndpoint.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProtectedEndpoint_lower(_ value: ProtectedEndpoint) -> RustBuffer {
    return FfiConverterTypeProtectedEndpoint.lower(value)
}


/**
 * FFI-compatible PublicKey
 */
public struct PublicKey {
    /**
     * Hex-encoded public key
     */
    public var hex: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Hex-encoded public key
         */hex: String) {
        self.hex = hex
    }
}

#if compiler(>=6)
extension PublicKey: Sendable {}
#endif


extension PublicKey: Equatable, Hashable {
    public static func ==(lhs: PublicKey, rhs: PublicKey) -> Bool {
        if lhs.hex != rhs.hex {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hex)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePublicKey: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PublicKey {
        return
            try PublicKey(
                hex: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: PublicKey, into buf: inout [UInt8]) {
        FfiConverterString.write(value.hex, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePublicKey_lift(_ buf: RustBuffer) throws -> PublicKey {
    return try FfiConverterTypePublicKey.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePublicKey_lower(_ value: PublicKey) -> RustBuffer {
    return FfiConverterTypePublicKey.lower(value)
}


/**
 * FFI-compatible Receive options
 */
public struct ReceiveOptions {
    /**
     * Amount split target
     */
    public var amountSplitTarget: SplitTarget
    /**
     * P2PK signing keys
     */
    public var p2pkSigningKeys: [SecretKey]
    /**
     * Preimages for HTLC conditions
     */
    public var preimages: [String]
    /**
     * Metadata
     */
    public var metadata: [String: String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Amount split target
         */amountSplitTarget: SplitTarget, 
        /**
         * P2PK signing keys
         */p2pkSigningKeys: [SecretKey], 
        /**
         * Preimages for HTLC conditions
         */preimages: [String], 
        /**
         * Metadata
         */metadata: [String: String]) {
        self.amountSplitTarget = amountSplitTarget
        self.p2pkSigningKeys = p2pkSigningKeys
        self.preimages = preimages
        self.metadata = metadata
    }
}

#if compiler(>=6)
extension ReceiveOptions: Sendable {}
#endif


extension ReceiveOptions: Equatable, Hashable {
    public static func ==(lhs: ReceiveOptions, rhs: ReceiveOptions) -> Bool {
        if lhs.amountSplitTarget != rhs.amountSplitTarget {
            return false
        }
        if lhs.p2pkSigningKeys != rhs.p2pkSigningKeys {
            return false
        }
        if lhs.preimages != rhs.preimages {
            return false
        }
        if lhs.metadata != rhs.metadata {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(amountSplitTarget)
        hasher.combine(p2pkSigningKeys)
        hasher.combine(preimages)
        hasher.combine(metadata)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeReceiveOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ReceiveOptions {
        return
            try ReceiveOptions(
                amountSplitTarget: FfiConverterTypeSplitTarget.read(from: &buf), 
                p2pkSigningKeys: FfiConverterSequenceTypeSecretKey.read(from: &buf), 
                preimages: FfiConverterSequenceString.read(from: &buf), 
                metadata: FfiConverterDictionaryStringString.read(from: &buf)
        )
    }

    public static func write(_ value: ReceiveOptions, into buf: inout [UInt8]) {
        FfiConverterTypeSplitTarget.write(value.amountSplitTarget, into: &buf)
        FfiConverterSequenceTypeSecretKey.write(value.p2pkSigningKeys, into: &buf)
        FfiConverterSequenceString.write(value.preimages, into: &buf)
        FfiConverterDictionaryStringString.write(value.metadata, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeReceiveOptions_lift(_ buf: RustBuffer) throws -> ReceiveOptions {
    return try FfiConverterTypeReceiveOptions.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeReceiveOptions_lower(_ value: ReceiveOptions) -> RustBuffer {
    return FfiConverterTypeReceiveOptions.lower(value)
}


/**
 * FFI-compatible SecretKey
 */
public struct SecretKey {
    /**
     * Hex-encoded secret key (64 characters)
     */
    public var hex: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Hex-encoded secret key (64 characters)
         */hex: String) {
        self.hex = hex
    }
}

#if compiler(>=6)
extension SecretKey: Sendable {}
#endif


extension SecretKey: Equatable, Hashable {
    public static func ==(lhs: SecretKey, rhs: SecretKey) -> Bool {
        if lhs.hex != rhs.hex {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hex)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSecretKey: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SecretKey {
        return
            try SecretKey(
                hex: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: SecretKey, into buf: inout [UInt8]) {
        FfiConverterString.write(value.hex, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSecretKey_lift(_ buf: RustBuffer) throws -> SecretKey {
    return try FfiConverterTypeSecretKey.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSecretKey_lower(_ value: SecretKey) -> RustBuffer {
    return FfiConverterTypeSecretKey.lower(value)
}


/**
 * FFI-compatible SendMemo
 */
public struct SendMemo {
    /**
     * Memo text
     */
    public var memo: String
    /**
     * Include memo in token
     */
    public var includeMemo: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Memo text
         */memo: String, 
        /**
         * Include memo in token
         */includeMemo: Bool) {
        self.memo = memo
        self.includeMemo = includeMemo
    }
}

#if compiler(>=6)
extension SendMemo: Sendable {}
#endif


extension SendMemo: Equatable, Hashable {
    public static func ==(lhs: SendMemo, rhs: SendMemo) -> Bool {
        if lhs.memo != rhs.memo {
            return false
        }
        if lhs.includeMemo != rhs.includeMemo {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(memo)
        hasher.combine(includeMemo)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSendMemo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendMemo {
        return
            try SendMemo(
                memo: FfiConverterString.read(from: &buf), 
                includeMemo: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: SendMemo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.memo, into: &buf)
        FfiConverterBool.write(value.includeMemo, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendMemo_lift(_ buf: RustBuffer) throws -> SendMemo {
    return try FfiConverterTypeSendMemo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendMemo_lower(_ value: SendMemo) -> RustBuffer {
    return FfiConverterTypeSendMemo.lower(value)
}


/**
 * FFI-compatible Send options
 */
public struct SendOptions {
    /**
     * Memo
     */
    public var memo: SendMemo?
    /**
     * Spending conditions
     */
    public var conditions: SpendingConditions?
    /**
     * Amount split target
     */
    public var amountSplitTarget: SplitTarget
    /**
     * Send kind
     */
    public var sendKind: SendKind
    /**
     * Include fee
     */
    public var includeFee: Bool
    /**
     * Maximum number of proofs to include in the token
     */
    public var maxProofs: UInt32?
    /**
     * Metadata
     */
    public var metadata: [String: String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Memo
         */memo: SendMemo?, 
        /**
         * Spending conditions
         */conditions: SpendingConditions?, 
        /**
         * Amount split target
         */amountSplitTarget: SplitTarget, 
        /**
         * Send kind
         */sendKind: SendKind, 
        /**
         * Include fee
         */includeFee: Bool, 
        /**
         * Maximum number of proofs to include in the token
         */maxProofs: UInt32?, 
        /**
         * Metadata
         */metadata: [String: String]) {
        self.memo = memo
        self.conditions = conditions
        self.amountSplitTarget = amountSplitTarget
        self.sendKind = sendKind
        self.includeFee = includeFee
        self.maxProofs = maxProofs
        self.metadata = metadata
    }
}

#if compiler(>=6)
extension SendOptions: Sendable {}
#endif


extension SendOptions: Equatable, Hashable {
    public static func ==(lhs: SendOptions, rhs: SendOptions) -> Bool {
        if lhs.memo != rhs.memo {
            return false
        }
        if lhs.conditions != rhs.conditions {
            return false
        }
        if lhs.amountSplitTarget != rhs.amountSplitTarget {
            return false
        }
        if lhs.sendKind != rhs.sendKind {
            return false
        }
        if lhs.includeFee != rhs.includeFee {
            return false
        }
        if lhs.maxProofs != rhs.maxProofs {
            return false
        }
        if lhs.metadata != rhs.metadata {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(memo)
        hasher.combine(conditions)
        hasher.combine(amountSplitTarget)
        hasher.combine(sendKind)
        hasher.combine(includeFee)
        hasher.combine(maxProofs)
        hasher.combine(metadata)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSendOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendOptions {
        return
            try SendOptions(
                memo: FfiConverterOptionTypeSendMemo.read(from: &buf), 
                conditions: FfiConverterOptionTypeSpendingConditions.read(from: &buf), 
                amountSplitTarget: FfiConverterTypeSplitTarget.read(from: &buf), 
                sendKind: FfiConverterTypeSendKind.read(from: &buf), 
                includeFee: FfiConverterBool.read(from: &buf), 
                maxProofs: FfiConverterOptionUInt32.read(from: &buf), 
                metadata: FfiConverterDictionaryStringString.read(from: &buf)
        )
    }

    public static func write(_ value: SendOptions, into buf: inout [UInt8]) {
        FfiConverterOptionTypeSendMemo.write(value.memo, into: &buf)
        FfiConverterOptionTypeSpendingConditions.write(value.conditions, into: &buf)
        FfiConverterTypeSplitTarget.write(value.amountSplitTarget, into: &buf)
        FfiConverterTypeSendKind.write(value.sendKind, into: &buf)
        FfiConverterBool.write(value.includeFee, into: &buf)
        FfiConverterOptionUInt32.write(value.maxProofs, into: &buf)
        FfiConverterDictionaryStringString.write(value.metadata, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendOptions_lift(_ buf: RustBuffer) throws -> SendOptions {
    return try FfiConverterTypeSendOptions.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendOptions_lower(_ value: SendOptions) -> RustBuffer {
    return FfiConverterTypeSendOptions.lower(value)
}


/**
 * FFI-compatible SubscribeParams
 */
public struct SubscribeParams {
    /**
     * Subscription kind
     */
    public var kind: SubscriptionKind
    /**
     * Filters
     */
    public var filters: [String]
    /**
     * Subscription ID (optional, will be generated if not provided)
     */
    public var id: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Subscription kind
         */kind: SubscriptionKind, 
        /**
         * Filters
         */filters: [String], 
        /**
         * Subscription ID (optional, will be generated if not provided)
         */id: String?) {
        self.kind = kind
        self.filters = filters
        self.id = id
    }
}

#if compiler(>=6)
extension SubscribeParams: Sendable {}
#endif


extension SubscribeParams: Equatable, Hashable {
    public static func ==(lhs: SubscribeParams, rhs: SubscribeParams) -> Bool {
        if lhs.kind != rhs.kind {
            return false
        }
        if lhs.filters != rhs.filters {
            return false
        }
        if lhs.id != rhs.id {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(kind)
        hasher.combine(filters)
        hasher.combine(id)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSubscribeParams: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SubscribeParams {
        return
            try SubscribeParams(
                kind: FfiConverterTypeSubscriptionKind.read(from: &buf), 
                filters: FfiConverterSequenceString.read(from: &buf), 
                id: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: SubscribeParams, into buf: inout [UInt8]) {
        FfiConverterTypeSubscriptionKind.write(value.kind, into: &buf)
        FfiConverterSequenceString.write(value.filters, into: &buf)
        FfiConverterOptionString.write(value.id, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSubscribeParams_lift(_ buf: RustBuffer) throws -> SubscribeParams {
    return try FfiConverterTypeSubscribeParams.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSubscribeParams_lower(_ value: SubscribeParams) -> RustBuffer {
    return FfiConverterTypeSubscribeParams.lower(value)
}


/**
 * FFI-compatible SupportedSettings
 */
public struct SupportedSettings {
    /**
     * Setting supported
     */
    public var supported: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Setting supported
         */supported: Bool) {
        self.supported = supported
    }
}

#if compiler(>=6)
extension SupportedSettings: Sendable {}
#endif


extension SupportedSettings: Equatable, Hashable {
    public static func ==(lhs: SupportedSettings, rhs: SupportedSettings) -> Bool {
        if lhs.supported != rhs.supported {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(supported)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSupportedSettings: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SupportedSettings {
        return
            try SupportedSettings(
                supported: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: SupportedSettings, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.supported, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSupportedSettings_lift(_ buf: RustBuffer) throws -> SupportedSettings {
    return try FfiConverterTypeSupportedSettings.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSupportedSettings_lower(_ value: SupportedSettings) -> RustBuffer {
    return FfiConverterTypeSupportedSettings.lower(value)
}


/**
 * FFI-compatible Transaction
 */
public struct Transaction {
    /**
     * Transaction ID
     */
    public var id: TransactionId
    /**
     * Mint URL
     */
    public var mintUrl: MintUrl
    /**
     * Transaction direction
     */
    public var direction: TransactionDirection
    /**
     * Amount
     */
    public var amount: Amount
    /**
     * Fee
     */
    public var fee: Amount
    /**
     * Currency Unit
     */
    public var unit: CurrencyUnit
    /**
     * Proof Ys (Y values from proofs)
     */
    public var ys: [PublicKey]
    /**
     * Unix timestamp
     */
    public var timestamp: UInt64
    /**
     * Memo
     */
    public var memo: String?
    /**
     * User-defined metadata
     */
    public var metadata: [String: String]
    /**
     * Quote ID if this is a mint or melt transaction
     */
    public var quoteId: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Transaction ID
         */id: TransactionId, 
        /**
         * Mint URL
         */mintUrl: MintUrl, 
        /**
         * Transaction direction
         */direction: TransactionDirection, 
        /**
         * Amount
         */amount: Amount, 
        /**
         * Fee
         */fee: Amount, 
        /**
         * Currency Unit
         */unit: CurrencyUnit, 
        /**
         * Proof Ys (Y values from proofs)
         */ys: [PublicKey], 
        /**
         * Unix timestamp
         */timestamp: UInt64, 
        /**
         * Memo
         */memo: String?, 
        /**
         * User-defined metadata
         */metadata: [String: String], 
        /**
         * Quote ID if this is a mint or melt transaction
         */quoteId: String?) {
        self.id = id
        self.mintUrl = mintUrl
        self.direction = direction
        self.amount = amount
        self.fee = fee
        self.unit = unit
        self.ys = ys
        self.timestamp = timestamp
        self.memo = memo
        self.metadata = metadata
        self.quoteId = quoteId
    }
}

#if compiler(>=6)
extension Transaction: Sendable {}
#endif


extension Transaction: Equatable, Hashable {
    public static func ==(lhs: Transaction, rhs: Transaction) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.mintUrl != rhs.mintUrl {
            return false
        }
        if lhs.direction != rhs.direction {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.fee != rhs.fee {
            return false
        }
        if lhs.unit != rhs.unit {
            return false
        }
        if lhs.ys != rhs.ys {
            return false
        }
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        if lhs.memo != rhs.memo {
            return false
        }
        if lhs.metadata != rhs.metadata {
            return false
        }
        if lhs.quoteId != rhs.quoteId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(mintUrl)
        hasher.combine(direction)
        hasher.combine(amount)
        hasher.combine(fee)
        hasher.combine(unit)
        hasher.combine(ys)
        hasher.combine(timestamp)
        hasher.combine(memo)
        hasher.combine(metadata)
        hasher.combine(quoteId)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Transaction {
        return
            try Transaction(
                id: FfiConverterTypeTransactionId.read(from: &buf), 
                mintUrl: FfiConverterTypeMintUrl.read(from: &buf), 
                direction: FfiConverterTypeTransactionDirection.read(from: &buf), 
                amount: FfiConverterTypeAmount.read(from: &buf), 
                fee: FfiConverterTypeAmount.read(from: &buf), 
                unit: FfiConverterTypeCurrencyUnit.read(from: &buf), 
                ys: FfiConverterSequenceTypePublicKey.read(from: &buf), 
                timestamp: FfiConverterUInt64.read(from: &buf), 
                memo: FfiConverterOptionString.read(from: &buf), 
                metadata: FfiConverterDictionaryStringString.read(from: &buf), 
                quoteId: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: Transaction, into buf: inout [UInt8]) {
        FfiConverterTypeTransactionId.write(value.id, into: &buf)
        FfiConverterTypeMintUrl.write(value.mintUrl, into: &buf)
        FfiConverterTypeTransactionDirection.write(value.direction, into: &buf)
        FfiConverterTypeAmount.write(value.amount, into: &buf)
        FfiConverterTypeAmount.write(value.fee, into: &buf)
        FfiConverterTypeCurrencyUnit.write(value.unit, into: &buf)
        FfiConverterSequenceTypePublicKey.write(value.ys, into: &buf)
        FfiConverterUInt64.write(value.timestamp, into: &buf)
        FfiConverterOptionString.write(value.memo, into: &buf)
        FfiConverterDictionaryStringString.write(value.metadata, into: &buf)
        FfiConverterOptionString.write(value.quoteId, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransaction_lift(_ buf: RustBuffer) throws -> Transaction {
    return try FfiConverterTypeTransaction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransaction_lower(_ value: Transaction) -> RustBuffer {
    return FfiConverterTypeTransaction.lower(value)
}


/**
 * FFI-compatible TransactionId
 */
public struct TransactionId {
    /**
     * Hex-encoded transaction ID (64 characters)
     */
    public var hex: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Hex-encoded transaction ID (64 characters)
         */hex: String) {
        self.hex = hex
    }
}

#if compiler(>=6)
extension TransactionId: Sendable {}
#endif


extension TransactionId: Equatable, Hashable {
    public static func ==(lhs: TransactionId, rhs: TransactionId) -> Bool {
        if lhs.hex != rhs.hex {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hex)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransactionId: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionId {
        return
            try TransactionId(
                hex: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: TransactionId, into buf: inout [UInt8]) {
        FfiConverterString.write(value.hex, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionId_lift(_ buf: RustBuffer) throws -> TransactionId {
    return try FfiConverterTypeTransactionId.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionId_lower(_ value: TransactionId) -> RustBuffer {
    return FfiConverterTypeTransactionId.lower(value)
}


/**
 * Result of a transfer operation with detailed breakdown
 */
public struct TransferResult {
    /**
     * Amount deducted from source mint
     */
    public var amountSent: Amount
    /**
     * Amount received at target mint
     */
    public var amountReceived: Amount
    /**
     * Total fees paid for the transfer
     */
    public var feesPaid: Amount
    /**
     * Remaining balance in source mint after transfer
     */
    public var sourceBalanceAfter: Amount
    /**
     * New balance in target mint after transfer
     */
    public var targetBalanceAfter: Amount

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Amount deducted from source mint
         */amountSent: Amount, 
        /**
         * Amount received at target mint
         */amountReceived: Amount, 
        /**
         * Total fees paid for the transfer
         */feesPaid: Amount, 
        /**
         * Remaining balance in source mint after transfer
         */sourceBalanceAfter: Amount, 
        /**
         * New balance in target mint after transfer
         */targetBalanceAfter: Amount) {
        self.amountSent = amountSent
        self.amountReceived = amountReceived
        self.feesPaid = feesPaid
        self.sourceBalanceAfter = sourceBalanceAfter
        self.targetBalanceAfter = targetBalanceAfter
    }
}

#if compiler(>=6)
extension TransferResult: Sendable {}
#endif


extension TransferResult: Equatable, Hashable {
    public static func ==(lhs: TransferResult, rhs: TransferResult) -> Bool {
        if lhs.amountSent != rhs.amountSent {
            return false
        }
        if lhs.amountReceived != rhs.amountReceived {
            return false
        }
        if lhs.feesPaid != rhs.feesPaid {
            return false
        }
        if lhs.sourceBalanceAfter != rhs.sourceBalanceAfter {
            return false
        }
        if lhs.targetBalanceAfter != rhs.targetBalanceAfter {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(amountSent)
        hasher.combine(amountReceived)
        hasher.combine(feesPaid)
        hasher.combine(sourceBalanceAfter)
        hasher.combine(targetBalanceAfter)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransferResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransferResult {
        return
            try TransferResult(
                amountSent: FfiConverterTypeAmount.read(from: &buf), 
                amountReceived: FfiConverterTypeAmount.read(from: &buf), 
                feesPaid: FfiConverterTypeAmount.read(from: &buf), 
                sourceBalanceAfter: FfiConverterTypeAmount.read(from: &buf), 
                targetBalanceAfter: FfiConverterTypeAmount.read(from: &buf)
        )
    }

    public static func write(_ value: TransferResult, into buf: inout [UInt8]) {
        FfiConverterTypeAmount.write(value.amountSent, into: &buf)
        FfiConverterTypeAmount.write(value.amountReceived, into: &buf)
        FfiConverterTypeAmount.write(value.feesPaid, into: &buf)
        FfiConverterTypeAmount.write(value.sourceBalanceAfter, into: &buf)
        FfiConverterTypeAmount.write(value.targetBalanceAfter, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransferResult_lift(_ buf: RustBuffer) throws -> TransferResult {
    return try FfiConverterTypeTransferResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransferResult_lower(_ value: TransferResult) -> RustBuffer {
    return FfiConverterTypeTransferResult.lower(value)
}


/**
 * Configuration for creating wallets
 */
public struct WalletConfig {
    public var targetProofCount: UInt32?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(targetProofCount: UInt32?) {
        self.targetProofCount = targetProofCount
    }
}

#if compiler(>=6)
extension WalletConfig: Sendable {}
#endif


extension WalletConfig: Equatable, Hashable {
    public static func ==(lhs: WalletConfig, rhs: WalletConfig) -> Bool {
        if lhs.targetProofCount != rhs.targetProofCount {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(targetProofCount)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletConfig {
        return
            try WalletConfig(
                targetProofCount: FfiConverterOptionUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: WalletConfig, into buf: inout [UInt8]) {
        FfiConverterOptionUInt32.write(value.targetProofCount, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletConfig_lift(_ buf: RustBuffer) throws -> WalletConfig {
    return try FfiConverterTypeWalletConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletConfig_lower(_ value: WalletConfig) -> RustBuffer {
    return FfiConverterTypeWalletConfig.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * FFI-compatible Currency Unit
 */

public enum CurrencyUnit {
    
    case sat
    case msat
    case usd
    case eur
    case auth
    case custom(unit: String
    )
}


#if compiler(>=6)
extension CurrencyUnit: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCurrencyUnit: FfiConverterRustBuffer {
    typealias SwiftType = CurrencyUnit

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CurrencyUnit {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .sat
        
        case 2: return .msat
        
        case 3: return .usd
        
        case 4: return .eur
        
        case 5: return .auth
        
        case 6: return .custom(unit: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CurrencyUnit, into buf: inout [UInt8]) {
        switch value {
        
        
        case .sat:
            writeInt(&buf, Int32(1))
        
        
        case .msat:
            writeInt(&buf, Int32(2))
        
        
        case .usd:
            writeInt(&buf, Int32(3))
        
        
        case .eur:
            writeInt(&buf, Int32(4))
        
        
        case .auth:
            writeInt(&buf, Int32(5))
        
        
        case let .custom(unit):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(unit, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCurrencyUnit_lift(_ buf: RustBuffer) throws -> CurrencyUnit {
    return try FfiConverterTypeCurrencyUnit.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCurrencyUnit_lower(_ value: CurrencyUnit) -> RustBuffer {
    return FfiConverterTypeCurrencyUnit.lower(value)
}


extension CurrencyUnit: Equatable, Hashable {}







/**
 * FFI Error type that wraps CDK errors for cross-language use
 */
public enum FfiError: Swift.Error {

    
    
    /**
     * Generic error with message
     */
    case Generic(message: String)
    
    /**
     * Amount overflow
     */
    case AmountOverflow(message: String)
    
    /**
     * Division by zero
     */
    case DivisionByZero(message: String)
    
    /**
     * Amount error
     */
    case Amount(message: String)
    
    /**
     * Payment failed
     */
    case PaymentFailed(message: String)
    
    /**
     * Payment pending
     */
    case PaymentPending(message: String)
    
    /**
     * Insufficient funds
     */
    case InsufficientFunds(message: String)
    
    /**
     * Database error
     */
    case Database(message: String)
    
    /**
     * Network error
     */
    case Network(message: String)
    
    /**
     * Invalid token
     */
    case InvalidToken(message: String)
    
    /**
     * Wallet error
     */
    case Wallet(message: String)
    
    /**
     * Keyset unknown
     */
    case KeysetUnknown(message: String)
    
    /**
     * Unit not supported
     */
    case UnitNotSupported(message: String)
    
    /**
     * Runtime task join error
     */
    case RuntimeTaskJoin(message: String)
    
    /**
     * Invalid mnemonic phrase
     */
    case InvalidMnemonic(message: String)
    
    /**
     * URL parsing error
     */
    case InvalidUrl(message: String)
    
    /**
     * Hex format error
     */
    case InvalidHex(message: String)
    
    /**
     * Cryptographic key parsing error
     */
    case InvalidCryptographicKey(message: String)
    
    /**
     * Serialization/deserialization error
     */
    case Serialization(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiError: FfiConverterRustBuffer {
    typealias SwiftType = FfiError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .AmountOverflow(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .DivisionByZero(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .Amount(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .PaymentFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .PaymentPending(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .InsufficientFunds(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .Database(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 9: return .Network(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 10: return .InvalidToken(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 11: return .Wallet(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 12: return .KeysetUnknown(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 13: return .UnitNotSupported(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 14: return .RuntimeTaskJoin(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 15: return .InvalidMnemonic(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 16: return .InvalidUrl(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 17: return .InvalidHex(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 18: return .InvalidCryptographicKey(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 19: return .Serialization(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FfiError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .Generic(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .AmountOverflow(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .DivisionByZero(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .Amount(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .PaymentFailed(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .PaymentPending(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))
        case .InsufficientFunds(_ /* message is ignored*/):
            writeInt(&buf, Int32(7))
        case .Database(_ /* message is ignored*/):
            writeInt(&buf, Int32(8))
        case .Network(_ /* message is ignored*/):
            writeInt(&buf, Int32(9))
        case .InvalidToken(_ /* message is ignored*/):
            writeInt(&buf, Int32(10))
        case .Wallet(_ /* message is ignored*/):
            writeInt(&buf, Int32(11))
        case .KeysetUnknown(_ /* message is ignored*/):
            writeInt(&buf, Int32(12))
        case .UnitNotSupported(_ /* message is ignored*/):
            writeInt(&buf, Int32(13))
        case .RuntimeTaskJoin(_ /* message is ignored*/):
            writeInt(&buf, Int32(14))
        case .InvalidMnemonic(_ /* message is ignored*/):
            writeInt(&buf, Int32(15))
        case .InvalidUrl(_ /* message is ignored*/):
            writeInt(&buf, Int32(16))
        case .InvalidHex(_ /* message is ignored*/):
            writeInt(&buf, Int32(17))
        case .InvalidCryptographicKey(_ /* message is ignored*/):
            writeInt(&buf, Int32(18))
        case .Serialization(_ /* message is ignored*/):
            writeInt(&buf, Int32(19))

        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiError_lift(_ buf: RustBuffer) throws -> FfiError {
    return try FfiConverterTypeFfiError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiError_lower(_ value: FfiError) -> RustBuffer {
    return FfiConverterTypeFfiError.lower(value)
}


extension FfiError: Equatable, Hashable {}




extension FfiError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * FFI-compatible MeltOptions
 */

public enum MeltOptions {
    
    /**
     * MPP (Multi-Part Payments) options
     */
    case mpp(amount: Amount
    )
    /**
     * Amountless options
     */
    case amountless(amountMsat: Amount
    )
}


#if compiler(>=6)
extension MeltOptions: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMeltOptions: FfiConverterRustBuffer {
    typealias SwiftType = MeltOptions

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MeltOptions {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .mpp(amount: try FfiConverterTypeAmount.read(from: &buf)
        )
        
        case 2: return .amountless(amountMsat: try FfiConverterTypeAmount.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MeltOptions, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .mpp(amount):
            writeInt(&buf, Int32(1))
            FfiConverterTypeAmount.write(amount, into: &buf)
            
        
        case let .amountless(amountMsat):
            writeInt(&buf, Int32(2))
            FfiConverterTypeAmount.write(amountMsat, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMeltOptions_lift(_ buf: RustBuffer) throws -> MeltOptions {
    return try FfiConverterTypeMeltOptions.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMeltOptions_lower(_ value: MeltOptions) -> RustBuffer {
    return FfiConverterTypeMeltOptions.lower(value)
}


extension MeltOptions: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * FFI-compatible NotificationPayload
 */

public enum NotificationPayload {
    
    /**
     * Proof state update
     */
    case proofState(proofStates: [ProofStateUpdate]
    )
    /**
     * Mint quote update
     */
    case mintQuoteUpdate(quote: MintQuoteBolt11Response
    )
    /**
     * Melt quote update
     */
    case meltQuoteUpdate(quote: MeltQuoteBolt11Response
    )
}


#if compiler(>=6)
extension NotificationPayload: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNotificationPayload: FfiConverterRustBuffer {
    typealias SwiftType = NotificationPayload

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NotificationPayload {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .proofState(proofStates: try FfiConverterSequenceTypeProofStateUpdate.read(from: &buf)
        )
        
        case 2: return .mintQuoteUpdate(quote: try FfiConverterTypeMintQuoteBolt11Response.read(from: &buf)
        )
        
        case 3: return .meltQuoteUpdate(quote: try FfiConverterTypeMeltQuoteBolt11Response.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NotificationPayload, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .proofState(proofStates):
            writeInt(&buf, Int32(1))
            FfiConverterSequenceTypeProofStateUpdate.write(proofStates, into: &buf)
            
        
        case let .mintQuoteUpdate(quote):
            writeInt(&buf, Int32(2))
            FfiConverterTypeMintQuoteBolt11Response.write(quote, into: &buf)
            
        
        case let .meltQuoteUpdate(quote):
            writeInt(&buf, Int32(3))
            FfiConverterTypeMeltQuoteBolt11Response.write(quote, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNotificationPayload_lift(_ buf: RustBuffer) throws -> NotificationPayload {
    return try FfiConverterTypeNotificationPayload.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNotificationPayload_lower(_ value: NotificationPayload) -> RustBuffer {
    return FfiConverterTypeNotificationPayload.lower(value)
}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * FFI-compatible PaymentMethod
 */

public enum PaymentMethod {
    
    /**
     * Bolt11 payment type
     */
    case bolt11
    /**
     * Bolt12 payment type
     */
    case bolt12
    /**
     * Custom payment type
     */
    case custom(method: String
    )
}


#if compiler(>=6)
extension PaymentMethod: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePaymentMethod: FfiConverterRustBuffer {
    typealias SwiftType = PaymentMethod

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentMethod {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .bolt11
        
        case 2: return .bolt12
        
        case 3: return .custom(method: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PaymentMethod, into buf: inout [UInt8]) {
        switch value {
        
        
        case .bolt11:
            writeInt(&buf, Int32(1))
        
        
        case .bolt12:
            writeInt(&buf, Int32(2))
        
        
        case let .custom(method):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(method, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePaymentMethod_lift(_ buf: RustBuffer) throws -> PaymentMethod {
    return try FfiConverterTypePaymentMethod.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePaymentMethod_lower(_ value: PaymentMethod) -> RustBuffer {
    return FfiConverterTypePaymentMethod.lower(value)
}


extension PaymentMethod: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * FFI-compatible Proof state
 */

public enum ProofState {
    
    case unspent
    case pending
    case spent
    case reserved
    case pendingSpent
}


#if compiler(>=6)
extension ProofState: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProofState: FfiConverterRustBuffer {
    typealias SwiftType = ProofState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProofState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .unspent
        
        case 2: return .pending
        
        case 3: return .spent
        
        case 4: return .reserved
        
        case 5: return .pendingSpent
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ProofState, into buf: inout [UInt8]) {
        switch value {
        
        
        case .unspent:
            writeInt(&buf, Int32(1))
        
        
        case .pending:
            writeInt(&buf, Int32(2))
        
        
        case .spent:
            writeInt(&buf, Int32(3))
        
        
        case .reserved:
            writeInt(&buf, Int32(4))
        
        
        case .pendingSpent:
            writeInt(&buf, Int32(5))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProofState_lift(_ buf: RustBuffer) throws -> ProofState {
    return try FfiConverterTypeProofState.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProofState_lower(_ value: ProofState) -> RustBuffer {
    return FfiConverterTypeProofState.lower(value)
}


extension ProofState: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * FFI-compatible QuoteState
 */

public enum QuoteState {
    
    case unpaid
    case paid
    case pending
    case issued
}


#if compiler(>=6)
extension QuoteState: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeQuoteState: FfiConverterRustBuffer {
    typealias SwiftType = QuoteState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> QuoteState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .unpaid
        
        case 2: return .paid
        
        case 3: return .pending
        
        case 4: return .issued
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: QuoteState, into buf: inout [UInt8]) {
        switch value {
        
        
        case .unpaid:
            writeInt(&buf, Int32(1))
        
        
        case .paid:
            writeInt(&buf, Int32(2))
        
        
        case .pending:
            writeInt(&buf, Int32(3))
        
        
        case .issued:
            writeInt(&buf, Int32(4))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeQuoteState_lift(_ buf: RustBuffer) throws -> QuoteState {
    return try FfiConverterTypeQuoteState.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeQuoteState_lower(_ value: QuoteState) -> RustBuffer {
    return FfiConverterTypeQuoteState.lower(value)
}


extension QuoteState: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * FFI-compatible SendKind
 */

public enum SendKind {
    
    /**
     * Allow online swap before send if wallet does not have exact amount
     */
    case onlineExact
    /**
     * Prefer offline send if difference is less than tolerance
     */
    case onlineTolerance(tolerance: Amount
    )
    /**
     * Wallet cannot do an online swap and selected proof must be exactly send amount
     */
    case offlineExact
    /**
     * Wallet must remain offline but can over pay if below tolerance
     */
    case offlineTolerance(tolerance: Amount
    )
}


#if compiler(>=6)
extension SendKind: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSendKind: FfiConverterRustBuffer {
    typealias SwiftType = SendKind

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendKind {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .onlineExact
        
        case 2: return .onlineTolerance(tolerance: try FfiConverterTypeAmount.read(from: &buf)
        )
        
        case 3: return .offlineExact
        
        case 4: return .offlineTolerance(tolerance: try FfiConverterTypeAmount.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SendKind, into buf: inout [UInt8]) {
        switch value {
        
        
        case .onlineExact:
            writeInt(&buf, Int32(1))
        
        
        case let .onlineTolerance(tolerance):
            writeInt(&buf, Int32(2))
            FfiConverterTypeAmount.write(tolerance, into: &buf)
            
        
        case .offlineExact:
            writeInt(&buf, Int32(3))
        
        
        case let .offlineTolerance(tolerance):
            writeInt(&buf, Int32(4))
            FfiConverterTypeAmount.write(tolerance, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendKind_lift(_ buf: RustBuffer) throws -> SendKind {
    return try FfiConverterTypeSendKind.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendKind_lower(_ value: SendKind) -> RustBuffer {
    return FfiConverterTypeSendKind.lower(value)
}


extension SendKind: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * FFI-compatible SpendingConditions
 */

public enum SpendingConditions {
    
    /**
     * P2PK (Pay to Public Key) conditions
     */
    case p2pk(
        /**
         * The public key (as hex string)
         */pubkey: String, 
        /**
         * Additional conditions
         */conditions: Conditions?
    )
    /**
     * HTLC (Hash Time Locked Contract) conditions
     */
    case htlc(
        /**
         * Hash of the preimage (as hex string)
         */hash: String, 
        /**
         * Additional conditions
         */conditions: Conditions?
    )
}


#if compiler(>=6)
extension SpendingConditions: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSpendingConditions: FfiConverterRustBuffer {
    typealias SwiftType = SpendingConditions

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SpendingConditions {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .p2pk(pubkey: try FfiConverterString.read(from: &buf), conditions: try FfiConverterOptionTypeConditions.read(from: &buf)
        )
        
        case 2: return .htlc(hash: try FfiConverterString.read(from: &buf), conditions: try FfiConverterOptionTypeConditions.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SpendingConditions, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .p2pk(pubkey,conditions):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(pubkey, into: &buf)
            FfiConverterOptionTypeConditions.write(conditions, into: &buf)
            
        
        case let .htlc(hash,conditions):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(hash, into: &buf)
            FfiConverterOptionTypeConditions.write(conditions, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSpendingConditions_lift(_ buf: RustBuffer) throws -> SpendingConditions {
    return try FfiConverterTypeSpendingConditions.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSpendingConditions_lower(_ value: SpendingConditions) -> RustBuffer {
    return FfiConverterTypeSpendingConditions.lower(value)
}


extension SpendingConditions: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * FFI-compatible SplitTarget
 */

public enum SplitTarget {
    
    /**
     * Default target; least amount of proofs
     */
    case none
    /**
     * Target amount for wallet to have most proofs that add up to value
     */
    case value(amount: Amount
    )
    /**
     * Specific amounts to split into (must equal amount being split)
     */
    case values(amounts: [Amount]
    )
}


#if compiler(>=6)
extension SplitTarget: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSplitTarget: FfiConverterRustBuffer {
    typealias SwiftType = SplitTarget

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SplitTarget {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .none
        
        case 2: return .value(amount: try FfiConverterTypeAmount.read(from: &buf)
        )
        
        case 3: return .values(amounts: try FfiConverterSequenceTypeAmount.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SplitTarget, into buf: inout [UInt8]) {
        switch value {
        
        
        case .none:
            writeInt(&buf, Int32(1))
        
        
        case let .value(amount):
            writeInt(&buf, Int32(2))
            FfiConverterTypeAmount.write(amount, into: &buf)
            
        
        case let .values(amounts):
            writeInt(&buf, Int32(3))
            FfiConverterSequenceTypeAmount.write(amounts, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSplitTarget_lift(_ buf: RustBuffer) throws -> SplitTarget {
    return try FfiConverterTypeSplitTarget.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSplitTarget_lower(_ value: SplitTarget) -> RustBuffer {
    return FfiConverterTypeSplitTarget.lower(value)
}


extension SplitTarget: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * FFI-compatible SubscriptionKind
 */

public enum SubscriptionKind {
    
    /**
     * Bolt 11 Melt Quote
     */
    case bolt11MeltQuote
    /**
     * Bolt 11 Mint Quote
     */
    case bolt11MintQuote
    /**
     * Bolt 12 Mint Quote
     */
    case bolt12MintQuote
    /**
     * Proof State
     */
    case proofState
}


#if compiler(>=6)
extension SubscriptionKind: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSubscriptionKind: FfiConverterRustBuffer {
    typealias SwiftType = SubscriptionKind

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SubscriptionKind {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .bolt11MeltQuote
        
        case 2: return .bolt11MintQuote
        
        case 3: return .bolt12MintQuote
        
        case 4: return .proofState
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SubscriptionKind, into buf: inout [UInt8]) {
        switch value {
        
        
        case .bolt11MeltQuote:
            writeInt(&buf, Int32(1))
        
        
        case .bolt11MintQuote:
            writeInt(&buf, Int32(2))
        
        
        case .bolt12MintQuote:
            writeInt(&buf, Int32(3))
        
        
        case .proofState:
            writeInt(&buf, Int32(4))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSubscriptionKind_lift(_ buf: RustBuffer) throws -> SubscriptionKind {
    return try FfiConverterTypeSubscriptionKind.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSubscriptionKind_lower(_ value: SubscriptionKind) -> RustBuffer {
    return FfiConverterTypeSubscriptionKind.lower(value)
}


extension SubscriptionKind: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * FFI-compatible TransactionDirection
 */

public enum TransactionDirection {
    
    /**
     * Incoming transaction (i.e., receive or mint)
     */
    case incoming
    /**
     * Outgoing transaction (i.e., send or melt)
     */
    case outgoing
}


#if compiler(>=6)
extension TransactionDirection: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransactionDirection: FfiConverterRustBuffer {
    typealias SwiftType = TransactionDirection

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionDirection {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .incoming
        
        case 2: return .outgoing
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TransactionDirection, into buf: inout [UInt8]) {
        switch value {
        
        
        case .incoming:
            writeInt(&buf, Int32(1))
        
        
        case .outgoing:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionDirection_lift(_ buf: RustBuffer) throws -> TransactionDirection {
    return try FfiConverterTypeTransactionDirection.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionDirection_lower(_ value: TransactionDirection) -> RustBuffer {
    return FfiConverterTypeTransactionDirection.lower(value)
}


extension TransactionDirection: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Transfer mode for mint-to-mint transfers
 */

public enum TransferMode {
    
    /**
     * Transfer exact amount to target (target receives specified amount)
     */
    case exactReceive(amount: Amount
    )
    /**
     * Transfer all available balance (source will be emptied)
     */
    case fullBalance
}


#if compiler(>=6)
extension TransferMode: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransferMode: FfiConverterRustBuffer {
    typealias SwiftType = TransferMode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransferMode {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .exactReceive(amount: try FfiConverterTypeAmount.read(from: &buf)
        )
        
        case 2: return .fullBalance
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TransferMode, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .exactReceive(amount):
            writeInt(&buf, Int32(1))
            FfiConverterTypeAmount.write(amount, into: &buf)
            
        
        case .fullBalance:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransferMode_lift(_ buf: RustBuffer) throws -> TransferMode {
    return try FfiConverterTypeTransferMode.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransferMode_lower(_ value: TransferMode) -> RustBuffer {
    return FfiConverterTypeTransferMode.lower(value)
}


extension TransferMode: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * FFI-compatible Witness
 */

public enum Witness {
    
    /**
     * P2PK Witness
     */
    case p2pk(
        /**
         * Signatures
         */signatures: [String]
    )
    /**
     * HTLC Witness
     */
    case htlc(
        /**
         * Preimage
         */preimage: String, 
        /**
         * Optional signatures
         */signatures: [String]?
    )
}


#if compiler(>=6)
extension Witness: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWitness: FfiConverterRustBuffer {
    typealias SwiftType = Witness

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Witness {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .p2pk(signatures: try FfiConverterSequenceString.read(from: &buf)
        )
        
        case 2: return .htlc(preimage: try FfiConverterString.read(from: &buf), signatures: try FfiConverterOptionSequenceString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Witness, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .p2pk(signatures):
            writeInt(&buf, Int32(1))
            FfiConverterSequenceString.write(signatures, into: &buf)
            
        
        case let .htlc(preimage,signatures):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(preimage, into: &buf)
            FfiConverterOptionSequenceString.write(signatures, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWitness_lift(_ buf: RustBuffer) throws -> Witness {
    return try FfiConverterTypeWitness.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWitness_lower(_ value: Witness) -> RustBuffer {
    return FfiConverterTypeWitness.lower(value)
}


extension Witness: Equatable, Hashable {}






#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionBool: FfiConverterRustBuffer {
    typealias SwiftType = Bool?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterBool.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterBool.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeAmount: FfiConverterRustBuffer {
    typealias SwiftType = Amount?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAmount.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAmount.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeBlindAuthSettings: FfiConverterRustBuffer {
    typealias SwiftType = BlindAuthSettings?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeBlindAuthSettings.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeBlindAuthSettings.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeClearAuthSettings: FfiConverterRustBuffer {
    typealias SwiftType = ClearAuthSettings?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeClearAuthSettings.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeClearAuthSettings.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeConditions: FfiConverterRustBuffer {
    typealias SwiftType = Conditions?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeConditions.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeConditions.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeKeySetInfo: FfiConverterRustBuffer {
    typealias SwiftType = KeySetInfo?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeKeySetInfo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeKeySetInfo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeKeys: FfiConverterRustBuffer {
    typealias SwiftType = Keys?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeKeys.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeKeys.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeMeltQuote: FfiConverterRustBuffer {
    typealias SwiftType = MeltQuote?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeMeltQuote.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeMeltQuote.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeMintInfo: FfiConverterRustBuffer {
    typealias SwiftType = MintInfo?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeMintInfo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeMintInfo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeMintQuote: FfiConverterRustBuffer {
    typealias SwiftType = MintQuote?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeMintQuote.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeMintQuote.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeMintUrl: FfiConverterRustBuffer {
    typealias SwiftType = MintUrl?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeMintUrl.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeMintUrl.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeMintVersion: FfiConverterRustBuffer {
    typealias SwiftType = MintVersion?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeMintVersion.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeMintVersion.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeProofDleq: FfiConverterRustBuffer {
    typealias SwiftType = ProofDleq?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeProofDleq.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeProofDleq.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeSendMemo: FfiConverterRustBuffer {
    typealias SwiftType = SendMemo?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeSendMemo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeSendMemo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeTransaction: FfiConverterRustBuffer {
    typealias SwiftType = Transaction?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeTransaction.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeTransaction.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeCurrencyUnit: FfiConverterRustBuffer {
    typealias SwiftType = CurrencyUnit?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCurrencyUnit.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCurrencyUnit.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeMeltOptions: FfiConverterRustBuffer {
    typealias SwiftType = MeltOptions?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeMeltOptions.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeMeltOptions.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeNotificationPayload: FfiConverterRustBuffer {
    typealias SwiftType = NotificationPayload?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeNotificationPayload.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeNotificationPayload.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeSpendingConditions: FfiConverterRustBuffer {
    typealias SwiftType = SpendingConditions?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeSpendingConditions.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeSpendingConditions.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeTransactionDirection: FfiConverterRustBuffer {
    typealias SwiftType = TransactionDirection?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeTransactionDirection.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeTransactionDirection.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeWitness: FfiConverterRustBuffer {
    typealias SwiftType = Witness?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeWitness.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeWitness.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypeProof: FfiConverterRustBuffer {
    typealias SwiftType = [Proof]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeProof.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeProof.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypeContactInfo: FfiConverterRustBuffer {
    typealias SwiftType = [ContactInfo]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeContactInfo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeContactInfo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypeKeySetInfo: FfiConverterRustBuffer {
    typealias SwiftType = [KeySetInfo]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeKeySetInfo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeKeySetInfo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypeProofState: FfiConverterRustBuffer {
    typealias SwiftType = [ProofState]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeProofState.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeProofState.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypeSpendingConditions: FfiConverterRustBuffer {
    typealias SwiftType = [SpendingConditions]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeSpendingConditions.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeSpendingConditions.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceBool: FfiConverterRustBuffer {
    typealias SwiftType = [Bool]

    public static func write(_ value: [Bool], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterBool.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Bool] {
        let len: Int32 = try readInt(&buf)
        var seq = [Bool]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterBool.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeProof: FfiConverterRustBuffer {
    typealias SwiftType = [Proof]

    public static func write(_ value: [Proof], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeProof.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Proof] {
        let len: Int32 = try readInt(&buf)
        var seq = [Proof]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeProof.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeAmount: FfiConverterRustBuffer {
    typealias SwiftType = [Amount]

    public static func write(_ value: [Amount], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAmount.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Amount] {
        let len: Int32 = try readInt(&buf)
        var seq = [Amount]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAmount.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeAuthProof: FfiConverterRustBuffer {
    typealias SwiftType = [AuthProof]

    public static func write(_ value: [AuthProof], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAuthProof.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AuthProof] {
        let len: Int32 = try readInt(&buf)
        var seq = [AuthProof]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAuthProof.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeContactInfo: FfiConverterRustBuffer {
    typealias SwiftType = [ContactInfo]

    public static func write(_ value: [ContactInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeContactInfo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ContactInfo] {
        let len: Int32 = try readInt(&buf)
        var seq = [ContactInfo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeContactInfo.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeKeySetInfo: FfiConverterRustBuffer {
    typealias SwiftType = [KeySetInfo]

    public static func write(_ value: [KeySetInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeKeySetInfo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [KeySetInfo] {
        let len: Int32 = try readInt(&buf)
        var seq = [KeySetInfo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeKeySetInfo.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeMeltMethodSettings: FfiConverterRustBuffer {
    typealias SwiftType = [MeltMethodSettings]

    public static func write(_ value: [MeltMethodSettings], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeMeltMethodSettings.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [MeltMethodSettings] {
        let len: Int32 = try readInt(&buf)
        var seq = [MeltMethodSettings]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeMeltMethodSettings.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeMeltQuote: FfiConverterRustBuffer {
    typealias SwiftType = [MeltQuote]

    public static func write(_ value: [MeltQuote], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeMeltQuote.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [MeltQuote] {
        let len: Int32 = try readInt(&buf)
        var seq = [MeltQuote]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeMeltQuote.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeMintMethodSettings: FfiConverterRustBuffer {
    typealias SwiftType = [MintMethodSettings]

    public static func write(_ value: [MintMethodSettings], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeMintMethodSettings.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [MintMethodSettings] {
        let len: Int32 = try readInt(&buf)
        var seq = [MintMethodSettings]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeMintMethodSettings.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeMintQuote: FfiConverterRustBuffer {
    typealias SwiftType = [MintQuote]

    public static func write(_ value: [MintQuote], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeMintQuote.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [MintQuote] {
        let len: Int32 = try readInt(&buf)
        var seq = [MintQuote]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeMintQuote.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeMintUrl: FfiConverterRustBuffer {
    typealias SwiftType = [MintUrl]

    public static func write(_ value: [MintUrl], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeMintUrl.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [MintUrl] {
        let len: Int32 = try readInt(&buf)
        var seq = [MintUrl]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeMintUrl.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeProofInfo: FfiConverterRustBuffer {
    typealias SwiftType = [ProofInfo]

    public static func write(_ value: [ProofInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeProofInfo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ProofInfo] {
        let len: Int32 = try readInt(&buf)
        var seq = [ProofInfo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeProofInfo.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeProofStateUpdate: FfiConverterRustBuffer {
    typealias SwiftType = [ProofStateUpdate]

    public static func write(_ value: [ProofStateUpdate], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeProofStateUpdate.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ProofStateUpdate] {
        let len: Int32 = try readInt(&buf)
        var seq = [ProofStateUpdate]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeProofStateUpdate.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeProtectedEndpoint: FfiConverterRustBuffer {
    typealias SwiftType = [ProtectedEndpoint]

    public static func write(_ value: [ProtectedEndpoint], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeProtectedEndpoint.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ProtectedEndpoint] {
        let len: Int32 = try readInt(&buf)
        var seq = [ProtectedEndpoint]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeProtectedEndpoint.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypePublicKey: FfiConverterRustBuffer {
    typealias SwiftType = [PublicKey]

    public static func write(_ value: [PublicKey], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePublicKey.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PublicKey] {
        let len: Int32 = try readInt(&buf)
        var seq = [PublicKey]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePublicKey.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeSecretKey: FfiConverterRustBuffer {
    typealias SwiftType = [SecretKey]

    public static func write(_ value: [SecretKey], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeSecretKey.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [SecretKey] {
        let len: Int32 = try readInt(&buf)
        var seq = [SecretKey]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeSecretKey.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeTransaction: FfiConverterRustBuffer {
    typealias SwiftType = [Transaction]

    public static func write(_ value: [Transaction], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTransaction.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Transaction] {
        let len: Int32 = try readInt(&buf)
        var seq = [Transaction]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeTransaction.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeCurrencyUnit: FfiConverterRustBuffer {
    typealias SwiftType = [CurrencyUnit]

    public static func write(_ value: [CurrencyUnit], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeCurrencyUnit.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [CurrencyUnit] {
        let len: Int32 = try readInt(&buf)
        var seq = [CurrencyUnit]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeCurrencyUnit.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeProofState: FfiConverterRustBuffer {
    typealias SwiftType = [ProofState]

    public static func write(_ value: [ProofState], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeProofState.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ProofState] {
        let len: Int32 = try readInt(&buf)
        var seq = [ProofState]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeProofState.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeSpendingConditions: FfiConverterRustBuffer {
    typealias SwiftType = [SpendingConditions]

    public static func write(_ value: [SpendingConditions], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeSpendingConditions.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [SpendingConditions] {
        let len: Int32 = try readInt(&buf)
        var seq = [SpendingConditions]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeSpendingConditions.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryUInt64String: FfiConverterRustBuffer {
    public static func write(_ value: [UInt64: String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterUInt64.write(key, into: &buf)
            FfiConverterString.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt64: String] {
        let len: Int32 = try readInt(&buf)
        var dict = [UInt64: String]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterUInt64.read(from: &buf)
            let value = try FfiConverterString.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryStringString: FfiConverterRustBuffer {
    public static func write(_ value: [String: String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterString.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: String] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: String]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterString.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryStringTypeAmount: FfiConverterRustBuffer {
    public static func write(_ value: [String: Amount], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeAmount.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: Amount] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: Amount]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeAmount.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryStringSequenceTypeProof: FfiConverterRustBuffer {
    public static func write(_ value: [String: [Proof]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterSequenceTypeProof.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: [Proof]] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: [Proof]]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterSequenceTypeProof.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryTypeMintUrlOptionTypeMintInfo: FfiConverterRustBuffer {
    public static func write(_ value: [MintUrl: MintInfo?], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterTypeMintUrl.write(key, into: &buf)
            FfiConverterOptionTypeMintInfo.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [MintUrl: MintInfo?] {
        let len: Int32 = try readInt(&buf)
        var dict = [MintUrl: MintInfo?]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterTypeMintUrl.read(from: &buf)
            let value = try FfiConverterOptionTypeMintInfo.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}
private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> (),
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Swift.Error)?
) async throws -> T {
    // Make sure to call the ensure init function since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureCdkFfiInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}
private func uniffiTraitInterfaceCallAsync<T>(
    makeCall: @escaping () async throws -> T,
    handleSuccess: @escaping (T) -> (),
    handleError: @escaping (Int8, RustBuffer) -> ()
) -> UniffiForeignFuture {
    let task = Task {
        do {
            handleSuccess(try await makeCall())
        } catch {
            handleError(CALL_UNEXPECTED_ERROR, FfiConverterString.lower(String(describing: error)))
        }
    }
    let handle = UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.insert(obj: task)
    return UniffiForeignFuture(handle: handle, free: uniffiForeignFutureFree)

}

private func uniffiTraitInterfaceCallAsyncWithError<T, E>(
    makeCall: @escaping () async throws -> T,
    handleSuccess: @escaping (T) -> (),
    handleError: @escaping (Int8, RustBuffer) -> (),
    lowerError: @escaping (E) -> RustBuffer
) -> UniffiForeignFuture {
    let task = Task {
        do {
            handleSuccess(try await makeCall())
        } catch let error as E {
            handleError(CALL_ERROR, lowerError(error))
        } catch {
            handleError(CALL_UNEXPECTED_ERROR, FfiConverterString.lower(String(describing: error)))
        }
    }
    let handle = UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.insert(obj: task)
    return UniffiForeignFuture(handle: handle, free: uniffiForeignFutureFree)
}

// Borrow the callback handle map implementation to store foreign future handles
// TODO: consolidate the handle-map code (https://github.com/mozilla/uniffi-rs/pull/1823)
fileprivate let UNIFFI_FOREIGN_FUTURE_HANDLE_MAP = UniffiHandleMap<UniffiForeignFutureTask>()

// Protocol for tasks that handle foreign futures.
//
// Defining a protocol allows all tasks to be stored in the same handle map.  This can't be done
// with the task object itself, since has generic parameters.
fileprivate protocol UniffiForeignFutureTask {
    func cancel()
}

extension Task: UniffiForeignFutureTask {}

private func uniffiForeignFutureFree(handle: UInt64) {
    do {
        let task = try UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.remove(handle: handle)
        // Set the cancellation flag on the task.  If it's still running, the code can check the
        // cancellation flag or call `Task.checkCancellation()`.  If the task has completed, this is
        // a no-op.
        task.cancel()
    } catch {
        print("uniffiForeignFutureFree: handle missing from handlemap")
    }
}

// For testing
public func uniffiForeignFutureHandleCountCdkFfi() -> Int {
    UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.count
}
/**
 * Decode AuthProof from JSON string
 */
public func decodeAuthProof(json: String)throws  -> AuthProof  {
    return try  FfiConverterTypeAuthProof_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_decode_auth_proof(
        FfiConverterString.lower(json),$0
    )
})
}
/**
 * Decode Conditions from JSON string
 */
public func decodeConditions(json: String)throws  -> Conditions  {
    return try  FfiConverterTypeConditions_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_decode_conditions(
        FfiConverterString.lower(json),$0
    )
})
}
/**
 * Decode ContactInfo from JSON string
 */
public func decodeContactInfo(json: String)throws  -> ContactInfo  {
    return try  FfiConverterTypeContactInfo_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_decode_contact_info(
        FfiConverterString.lower(json),$0
    )
})
}
/**
 * Decode KeySet from JSON string
 */
public func decodeKeySet(json: String)throws  -> KeySet  {
    return try  FfiConverterTypeKeySet_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_decode_key_set(
        FfiConverterString.lower(json),$0
    )
})
}
/**
 * Decode KeySetInfo from JSON string
 */
public func decodeKeySetInfo(json: String)throws  -> KeySetInfo  {
    return try  FfiConverterTypeKeySetInfo_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_decode_key_set_info(
        FfiConverterString.lower(json),$0
    )
})
}
/**
 * Decode Keys from JSON string
 */
public func decodeKeys(json: String)throws  -> Keys  {
    return try  FfiConverterTypeKeys_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_decode_keys(
        FfiConverterString.lower(json),$0
    )
})
}
/**
 * Decode MeltQuote from JSON string
 */
public func decodeMeltQuote(json: String)throws  -> MeltQuote  {
    return try  FfiConverterTypeMeltQuote_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_decode_melt_quote(
        FfiConverterString.lower(json),$0
    )
})
}
/**
 * Decode MintInfo from JSON string
 */
public func decodeMintInfo(json: String)throws  -> MintInfo  {
    return try  FfiConverterTypeMintInfo_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_decode_mint_info(
        FfiConverterString.lower(json),$0
    )
})
}
/**
 * Decode MintQuote from JSON string
 */
public func decodeMintQuote(json: String)throws  -> MintQuote  {
    return try  FfiConverterTypeMintQuote_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_decode_mint_quote(
        FfiConverterString.lower(json),$0
    )
})
}
/**
 * Decode MintVersion from JSON string
 */
public func decodeMintVersion(json: String)throws  -> MintVersion  {
    return try  FfiConverterTypeMintVersion_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_decode_mint_version(
        FfiConverterString.lower(json),$0
    )
})
}
/**
 * Decode Nuts from JSON string
 */
public func decodeNuts(json: String)throws  -> Nuts  {
    return try  FfiConverterTypeNuts_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_decode_nuts(
        FfiConverterString.lower(json),$0
    )
})
}
/**
 * Decode ProofInfo from JSON string
 */
public func decodeProofInfo(json: String)throws  -> ProofInfo  {
    return try  FfiConverterTypeProofInfo_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_decode_proof_info(
        FfiConverterString.lower(json),$0
    )
})
}
/**
 * Decode ProofStateUpdate from JSON string
 */
public func decodeProofStateUpdate(json: String)throws  -> ProofStateUpdate  {
    return try  FfiConverterTypeProofStateUpdate_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_decode_proof_state_update(
        FfiConverterString.lower(json),$0
    )
})
}
/**
 * Decode ReceiveOptions from JSON string
 */
public func decodeReceiveOptions(json: String)throws  -> ReceiveOptions  {
    return try  FfiConverterTypeReceiveOptions_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_decode_receive_options(
        FfiConverterString.lower(json),$0
    )
})
}
/**
 * Decode SendMemo from JSON string
 */
public func decodeSendMemo(json: String)throws  -> SendMemo  {
    return try  FfiConverterTypeSendMemo_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_decode_send_memo(
        FfiConverterString.lower(json),$0
    )
})
}
/**
 * Decode SendOptions from JSON string
 */
public func decodeSendOptions(json: String)throws  -> SendOptions  {
    return try  FfiConverterTypeSendOptions_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_decode_send_options(
        FfiConverterString.lower(json),$0
    )
})
}
/**
 * Decode SubscribeParams from JSON string
 */
public func decodeSubscribeParams(json: String)throws  -> SubscribeParams  {
    return try  FfiConverterTypeSubscribeParams_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_decode_subscribe_params(
        FfiConverterString.lower(json),$0
    )
})
}
/**
 * Decode Transaction from JSON string
 */
public func decodeTransaction(json: String)throws  -> Transaction  {
    return try  FfiConverterTypeTransaction_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_decode_transaction(
        FfiConverterString.lower(json),$0
    )
})
}
/**
 * Encode AuthProof to JSON string
 */
public func encodeAuthProof(proof: AuthProof)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_encode_auth_proof(
        FfiConverterTypeAuthProof_lower(proof),$0
    )
})
}
/**
 * Encode Conditions to JSON string
 */
public func encodeConditions(conditions: Conditions)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_encode_conditions(
        FfiConverterTypeConditions_lower(conditions),$0
    )
})
}
/**
 * Encode ContactInfo to JSON string
 */
public func encodeContactInfo(info: ContactInfo)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_encode_contact_info(
        FfiConverterTypeContactInfo_lower(info),$0
    )
})
}
/**
 * Encode KeySet to JSON string
 */
public func encodeKeySet(keyset: KeySet)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_encode_key_set(
        FfiConverterTypeKeySet_lower(keyset),$0
    )
})
}
/**
 * Encode KeySetInfo to JSON string
 */
public func encodeKeySetInfo(info: KeySetInfo)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_encode_key_set_info(
        FfiConverterTypeKeySetInfo_lower(info),$0
    )
})
}
/**
 * Encode Keys to JSON string
 */
public func encodeKeys(keys: Keys)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_encode_keys(
        FfiConverterTypeKeys_lower(keys),$0
    )
})
}
/**
 * Encode MeltQuote to JSON string
 */
public func encodeMeltQuote(quote: MeltQuote)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_encode_melt_quote(
        FfiConverterTypeMeltQuote_lower(quote),$0
    )
})
}
/**
 * Encode MintInfo to JSON string
 */
public func encodeMintInfo(info: MintInfo)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_encode_mint_info(
        FfiConverterTypeMintInfo_lower(info),$0
    )
})
}
/**
 * Encode MintQuote to JSON string
 */
public func encodeMintQuote(quote: MintQuote)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_encode_mint_quote(
        FfiConverterTypeMintQuote_lower(quote),$0
    )
})
}
/**
 * Encode MintVersion to JSON string
 */
public func encodeMintVersion(version: MintVersion)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_encode_mint_version(
        FfiConverterTypeMintVersion_lower(version),$0
    )
})
}
/**
 * Encode Nuts to JSON string
 */
public func encodeNuts(nuts: Nuts)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_encode_nuts(
        FfiConverterTypeNuts_lower(nuts),$0
    )
})
}
/**
 * Encode ProofInfo to JSON string
 */
public func encodeProofInfo(info: ProofInfo)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_encode_proof_info(
        FfiConverterTypeProofInfo_lower(info),$0
    )
})
}
/**
 * Encode ProofStateUpdate to JSON string
 */
public func encodeProofStateUpdate(update: ProofStateUpdate)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_encode_proof_state_update(
        FfiConverterTypeProofStateUpdate_lower(update),$0
    )
})
}
/**
 * Encode ReceiveOptions to JSON string
 */
public func encodeReceiveOptions(options: ReceiveOptions)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_encode_receive_options(
        FfiConverterTypeReceiveOptions_lower(options),$0
    )
})
}
/**
 * Encode SendMemo to JSON string
 */
public func encodeSendMemo(memo: SendMemo)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_encode_send_memo(
        FfiConverterTypeSendMemo_lower(memo),$0
    )
})
}
/**
 * Encode SendOptions to JSON string
 */
public func encodeSendOptions(options: SendOptions)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_encode_send_options(
        FfiConverterTypeSendOptions_lower(options),$0
    )
})
}
/**
 * Encode SubscribeParams to JSON string
 */
public func encodeSubscribeParams(params: SubscribeParams)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_encode_subscribe_params(
        FfiConverterTypeSubscribeParams_lower(params),$0
    )
})
}
/**
 * Encode Transaction to JSON string
 */
public func encodeTransaction(transaction: Transaction)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_encode_transaction(
        FfiConverterTypeTransaction_lower(transaction),$0
    )
})
}
/**
 * Generates a new random mnemonic phrase
 */
public func generateMnemonic()throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_generate_mnemonic($0
    )
})
}
/**
 * Converts a mnemonic phrase to its entropy bytes
 */
public func mnemonicToEntropy(mnemonic: String)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_cdk_ffi_fn_func_mnemonic_to_entropy(
        FfiConverterString.lower(mnemonic),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_cdk_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_decode_auth_proof() != 22357) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_decode_conditions() != 18453) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_decode_contact_info() != 40231) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_decode_key_set() != 64139) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_decode_key_set_info() != 26774) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_decode_keys() != 38114) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_decode_melt_quote() != 31843) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_decode_mint_info() != 4255) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_decode_mint_quote() != 12595) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_decode_mint_version() != 54734) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_decode_nuts() != 23702) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_decode_proof_info() != 19899) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_decode_proof_state_update() != 25192) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_decode_receive_options() != 46457) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_decode_send_memo() != 6016) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_decode_send_options() != 43827) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_decode_subscribe_params() != 6793) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_decode_transaction() != 48687) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_encode_auth_proof() != 15755) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_encode_conditions() != 48516) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_encode_contact_info() != 44629) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_encode_key_set() != 10879) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_encode_key_set_info() != 18895) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_encode_keys() != 20045) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_encode_melt_quote() != 25080) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_encode_mint_info() != 31825) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_encode_mint_quote() != 52375) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_encode_mint_version() != 3369) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_encode_nuts() != 30942) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_encode_proof_info() != 32664) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_encode_proof_state_update() != 62126) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_encode_receive_options() != 34534) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_encode_send_memo() != 10559) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_encode_send_options() != 12512) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_encode_subscribe_params() != 58897) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_encode_transaction() != 38295) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_generate_mnemonic() != 17512) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_func_mnemonic_to_entropy() != 58572) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_activesubscription_id() != 53295) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_activesubscription_recv() != 64493) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_activesubscription_try_recv() != 8454) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_meltquotebolt11response_amount() != 52429) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_meltquotebolt11response_expiry() != 54308) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_meltquotebolt11response_fee_reserve() != 51947) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_meltquotebolt11response_payment_preimage() != 18401) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_meltquotebolt11response_quote() != 22053) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_meltquotebolt11response_request() != 35924) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_meltquotebolt11response_state() != 404) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_meltquotebolt11response_unit() != 35868) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_mintquotebolt11response_amount() != 22699) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_mintquotebolt11response_expiry() != 45849) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_mintquotebolt11response_pubkey() != 41072) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_mintquotebolt11response_quote() != 10050) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_mintquotebolt11response_request() != 23152) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_mintquotebolt11response_state() != 39833) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_mintquotebolt11response_unit() != 19782) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_add_mint() != 58913) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_check_all_mint_quotes() != 50601) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_consolidate() != 51458) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_get_balances() != 10177) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_get_mint_urls() != 40736) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_has_mint() != 31683) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_list_proofs() != 62650) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_list_transactions() != 18245) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_melt() != 16024) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_melt_quote() != 24971) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_mint() != 13280) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_mint_quote() != 56223) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_prepare_send() != 35914) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_receive() != 54819) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_remove_mint() != 60048) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_restore() != 11050) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_swap() != 27574) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_total_balance() != 42451) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_transfer() != 29742) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_unit() != 64911) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_multimintwallet_verify_token_dleq() != 8825) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_preparedsend_amount() != 62180) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_preparedsend_cancel() != 48000) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_preparedsend_confirm() != 5962) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_preparedsend_fee() != 37119) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_preparedsend_id() != 18191) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_preparedsend_proofs() != 23923) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_proof_amount() != 46072) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_proof_c() != 3807) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_proof_dleq() != 11014) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_proof_has_dleq() != 6642) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_proof_is_active() != 40357) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_proof_keyset_id() != 30712) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_proof_secret() != 58524) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_proof_witness() != 11014) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_proof_y() != 27624) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_token_encode() != 53245) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_token_memo() != 28883) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_token_mint_url() != 16820) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_token_proofs_simple() != 24034) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_token_to_raw_bytes() != 25396) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_token_unit() != 55723) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_token_value() != 22223) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_calculate_fee() != 1751) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_check_all_pending_proofs() != 3292) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_check_proofs_spent() != 48196) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_get_active_keyset() != 55608) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_get_keyset_fees_by_id() != 51180) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_get_mint_info() != 46501) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_get_proofs_by_states() != 63476) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_get_transaction() != 62811) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_get_unspent_auth_proofs() != 31137) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_list_transactions() != 20673) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_melt() != 33983) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_melt_bip353_quote() != 56775) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_melt_bolt12_quote() != 33749) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_melt_quote() != 16819) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_mint() != 61108) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_mint_blind_auth() != 39214) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_mint_bolt12() != 60444) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_mint_bolt12_quote() != 56408) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_mint_quote() != 48314) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_mint_url() != 6804) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_prepare_send() != 18579) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_receive() != 34397) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_receive_proofs() != 17448) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_reclaim_unspent() != 35245) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_refresh_access_token() != 63251) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_refresh_keysets() != 60028) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_restore() != 48186) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_revert_transaction() != 31115) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_set_cat() != 29016) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_set_refresh_token() != 28616) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_subscribe() != 26376) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_swap() != 54923) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_total_balance() != 37325) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_total_pending_balance() != 26959) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_total_reserved_balance() != 65325) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_unit() != 33359) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_wallet_verify_token_dleq() != 53589) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_add_mint() != 8275) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_remove_mint() != 59506) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_get_mint() != 63376) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_get_mints() != 52728) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_update_mint_url() != 60825) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_add_mint_keysets() != 37141) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_get_mint_keysets() != 62744) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_get_keyset_by_id() != 46829) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_add_mint_quote() != 42839) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_get_mint_quote() != 29507) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_get_mint_quotes() != 16761) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_remove_mint_quote() != 27636) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_add_melt_quote() != 55901) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_get_melt_quote() != 59625) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_get_melt_quotes() != 4012) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_remove_melt_quote() != 12849) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_add_keys() != 33500) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_get_keys() != 17359) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_remove_keys() != 50621) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_update_proofs() != 18069) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_get_proofs() != 10055) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_update_proofs_state() != 43796) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_increment_keyset_counter() != 9082) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_add_transaction() != 15101) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_get_transaction() != 17925) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_list_transactions() != 60133) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletdatabase_remove_transaction() != 42313) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_add_keys() != 5879) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_add_melt_quote() != 34892) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_add_mint() != 44674) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_add_mint_keysets() != 13932) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_add_mint_quote() != 62077) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_add_transaction() != 26193) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_get_keys() != 41498) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_get_keyset_by_id() != 37425) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_get_melt_quote() != 31302) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_get_melt_quotes() != 1543) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_get_mint() != 23917) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_get_mint_keysets() != 13541) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_get_mint_quote() != 57388) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_get_mint_quotes() != 50536) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_get_mints() != 14065) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_get_proofs() != 48231) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_get_transaction() != 52949) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_increment_keyset_counter() != 61780) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_list_transactions() != 22793) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_remove_keys() != 64071) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_remove_melt_quote() != 16969) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_remove_mint() != 32740) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_remove_mint_quote() != 55358) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_remove_transaction() != 38835) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_update_mint_url() != 2109) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_update_proofs() != 23133) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_method_walletsqlitedatabase_update_proofs_state() != 51402) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_constructor_multimintwallet_new() != 56682) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_constructor_multimintwallet_new_with_proxy() != 52208) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_constructor_token_decode() != 17843) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_constructor_token_from_string() != 43724) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_constructor_wallet_new() != 10944) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_constructor_walletsqlitedatabase_new() != 10235) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cdk_ffi_checksum_constructor_walletsqlitedatabase_new_in_memory() != 41747) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitWalletDatabase()
    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureCdkFfiInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all